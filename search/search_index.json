{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome","text":"<p>Welcome to our website.</p>"},{"location":"checklist/","title":"Site Checklist","text":"<ol> <li>Customize the fields in your mkdocs.yml file</li> <li>Configure Google Analytics to use the right site ID</li> <li>Make sure that your .gitignore file includes the <code>site</code> directory</li> <li>Test the build</li> <li>Make sure the Edit button appears</li> <li>Make sure that code color heightening renders correctly</li> <li>run <code>git config advice.addIgnoredFile false</code></li> </ol>"},{"location":"code-highlight-test/","title":"Code Syntax Color Highlight Test","text":""},{"location":"code-highlight-test/#python","title":"Python","text":"<pre><code>hello_string = \"Hello World!\"\nprint(hello_string)\nx = 1\nif x == 1:\n    # indented four spaces\n    print(\"x is 1.\")\n</code></pre>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"glossary/","title":"Glossary of Terms","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO metadata registry guideline 11179 if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#term","title":"Term","text":"<p>This is the definition of the term.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"usb-debug/","title":"Raspberry Pi Pico USB Issues on ChromeOS Crostini: Complete Troubleshooting Guide","text":"<p>The \"MicroPython board in FS Mode\" showing in lsusb after disconnection indicates a USB device caching issue in ChromeOS/Crostini, not a hardware problem with the Pico. This comprehensive guide provides systematic solutions to restore proper USB connectivity for your Raspberry Pi Pico and Thonny IDE on ChromeOS Linux containers.</p>"},{"location":"usb-debug/#understanding-the-core-issue","title":"Understanding the core issue","text":"<p>Critical insight: \"MicroPython board in FS Mode\" is the normal, expected state when MicroPython firmware is running properly on your Pico. The problem isn't a \"stuck\" Pico, but rather ChromeOS/Crostini's USB subsystem not properly detecting the disconnection. This creates phantom device entries that prevent new connections from working correctly.</p> <p>Device identification: Your Pico appears with USB ID <code>2E8A:0005</code> in MicroPython mode and shows as a serial device at <code>/dev/ttyACM0</code>. The persistent lsusb listing suggests the Crostini container hasn't updated its USB device cache after disconnection.</p>"},{"location":"usb-debug/#immediate-diagnostic-steps","title":"Immediate diagnostic steps","text":"<p>Start with these commands to assess the current state:</p> <pre><code># Check current USB device status\nlsusb | grep -E \"(MicroPython|2e8a)\"\nls -la /dev/ttyACM* 2&gt;/dev/null\ndmesg | grep -i usb | tail -10\n\n# Monitor for real disconnection events  \ndmesg -w | grep -i usb &amp;\n# Now physically disconnect/reconnect the Pico and observe output\n</code></pre> <p>If dmesg shows no disconnect events when unplugging, the issue is confirmed as container-level USB caching.</p>"},{"location":"usb-debug/#step-by-step-resolution-procedures","title":"Step-by-step resolution procedures","text":""},{"location":"usb-debug/#method-1-container-restart-recommended-first-attempt","title":"Method 1: Container restart (recommended first attempt)","text":"<p>ChromeOS Crostini uses a layered architecture where USB devices are forwarded from the host through the Termina VM to your Penguin container. Restarting the container often clears cached USB device state.</p> <pre><code># From ChromeOS: Right-click Terminal icon in shelf \u2192 \"Shut down Linux\"\n# Wait 30 seconds, then reopen Terminal\n# Verify device cache is cleared:\nlsusb | grep -E \"(MicroPython|2e8a)\"\n</code></pre> <p>Alternative container restart via crosh: <pre><code># Press Ctrl+Alt+T to open crosh terminal\ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina\n# Exit crosh and restart Terminal\n</code></pre></p>"},{"location":"usb-debug/#method-2-usb-subsystem-reset-within-container","title":"Method 2: USB subsystem reset within container","text":"<p>If container restart doesn't resolve the issue, force a USB subsystem refresh:</p> <pre><code># Reset USB device enumeration\nsudo systemctl restart systemd-udevd\n\n# Reload and trigger udev rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger --subsystem-match=usb\n\n# Clear any cached device listings\nsudo modprobe -r usbserial\nsudo modprobe usbserial\n</code></pre>"},{"location":"usb-debug/#method-3-chromeos-usb-device-management","title":"Method 3: ChromeOS USB device management","text":"<p>ChromeOS requires explicit USB device sharing with Linux containers. Reset the sharing configuration:</p> <ol> <li>Navigate to: ChromeOS Settings \u2192 Advanced \u2192 Developers \u2192 Linux development environment \u2192 Manage USB devices</li> <li>If \"Board in FS Mode\" or similar Pico device is listed, toggle it OFF then ON</li> <li>If no Pico device appears, physically reconnect while holding BOOTSEL button</li> <li>The Pico should appear as \"RPI-RP2\" drive first, then as \"MicroPython board\" after releasing BOOTSEL</li> </ol> <p>Enable advanced USB support via Chrome flags: <pre><code>chrome://flags/#crostini-usb-allow-unsupported\n</code></pre> Set to \"Enabled\" and restart Chrome.</p>"},{"location":"usb-debug/#method-4-complete-vm-restart","title":"Method 4: Complete VM restart","text":"<p>For persistent issues, restart the entire Termina VM:</p> <pre><code># In crosh (Ctrl+Alt+T):\ncrosh&gt; vmc list              # Verify termina is running  \ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina --enable-audio-capture\n</code></pre> <p>This performs a complete reset of the USB forwarding layer between ChromeOS and your container.</p>"},{"location":"usb-debug/#thonny-ide-connectivity-restoration","title":"Thonny IDE connectivity restoration","text":"<p>Once USB device caching is resolved, configure Thonny for reliable Pico connectivity:</p>"},{"location":"usb-debug/#install-thonny-correctly-on-chromeos","title":"Install Thonny correctly on ChromeOS","text":"<pre><code># Update system and install dependencies\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install python3-tk python3-pip wget curl -y\n\n# Install Thonny using official installer (recommended)\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n\n# Installation path: ~/apps/thonny/bin/thonny\n</code></pre>"},{"location":"usb-debug/#configure-serial-port-permissions","title":"Configure serial port permissions","text":"<pre><code># Add user to dialout group for serial access\nsudo usermod -a -G dialout $USER\nsudo usermod -a -G plugdev $USER\n\n# Remove brltty conflicts (common on Ubuntu 22.04+)\nsudo apt purge brltty -y\n\n# Reboot to apply group changes\nsudo reboot\n</code></pre>"},{"location":"usb-debug/#set-up-thonny-interpreter","title":"Set up Thonny interpreter","text":"<ol> <li>Launch Thonny: <code>~/apps/thonny/bin/thonny</code></li> <li>Go to Run \u2192 Select interpreter</li> <li>Choose MicroPython (Raspberry Pi Pico) or MicroPython (generic)</li> <li>If using generic, manually select port: <code>/dev/ttyACM0</code></li> <li>Test connection: <pre><code>print(\"Hello from Pico!\")\nhelp()\n</code></pre></li> </ol>"},{"location":"usb-debug/#advanced-troubleshooting-for-persistent-issues","title":"Advanced troubleshooting for persistent issues","text":""},{"location":"usb-debug/#fix-udev-rules-and-permissions","title":"Fix udev rules and permissions","text":"<p>Create comprehensive USB permission rules:</p> <pre><code># Create universal USB permissions rule\nsudo tee /etc/udev/rules.d/99-pico-permissions.rules &lt;&lt; 'EOF'\n# Raspberry Pi Pico permissions\nKERNEL==\"ttyACM[0-9]*\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"dialout\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0003\", MODE=\"0666\", GROUP=\"plugdev\"\nEOF\n\n# Apply rules immediately\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"usb-debug/#hardware-level-pico-reset-procedures","title":"Hardware-level Pico reset procedures","text":"<p>If the Pico appears genuinely unresponsive (rare), perform a hardware reset:</p> <p>Method 1 - BOOTSEL reset: 1. Hold BOOTSEL button on Pico 2. Connect USB cable (or press/release reset button if available) 3. Release BOOTSEL button 4. Pico appears as \"RPI-RP2\" drive 5. Install fresh MicroPython firmware from https://micropython.org/download/rp2-pico/</p> <p>Method 2 - Software reset from MicroPython: <pre><code># In Thonny or Python REPL:\nimport machine\nmachine.bootloader()  # Forces Pico into BOOTSEL mode\n</code></pre></p>"},{"location":"usb-debug/#comprehensive-system-verification","title":"Comprehensive system verification","text":"<p>Create a verification script to check all components:</p> <pre><code>#!/bin/bash\necho \"=== ChromeOS Crostini Pico Diagnostics ===\"\necho \"USB devices:\"\nlsusb | grep -E \"(2e8a|MicroPython)\" || echo \"No Pico devices found\"\n\necho -e \"\\nSerial devices:\"\nls -la /dev/ttyACM* 2&gt;/dev/null || echo \"No ACM devices\"\n\necho -e \"\\nUser groups:\"\ngroups $USER | grep -E \"(dialout|plugdev)\" || echo \"Missing required groups\"\n\necho -e \"\\nCrOS USB sharing status:\"\nls -la /mnt/chromeos/removable/ | grep -i pico || echo \"No shared devices\"\n\necho -e \"\\nRecent USB events:\"\ndmesg | grep -i usb | tail -5\n\necho -e \"\\nThonny installation:\"\ntest -f ~/apps/thonny/bin/thonny &amp;&amp; echo \"Thonny installed correctly\" || echo \"Thonny not found\"\n</code></pre>"},{"location":"usb-debug/#prevention-and-monitoring","title":"Prevention and monitoring","text":""},{"location":"usb-debug/#set-up-usb-monitoring","title":"Set up USB monitoring","text":"<p>Monitor USB events to catch future issues early:</p> <pre><code># Real-time USB event monitoring\nudevadm monitor --subsystem-match=usb &amp;\ndmesg -w | grep -i usb &amp;\n</code></pre>"},{"location":"usb-debug/#disable-problematic-power-management","title":"Disable problematic power management","text":"<p>USB autosuspend can cause connectivity issues:</p> <pre><code># Disable autosuspend for Pico devices\necho 'ACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTR{power/autosuspend}=\"-1\"' | sudo tee -a /etc/udev/rules.d/50-usb-autosuspend.rules\n\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"usb-debug/#when-all-else-fails","title":"When all else fails","text":""},{"location":"usb-debug/#alternative-development-approaches","title":"Alternative development approaches","text":"<p>Web-based development: If USB continues to fail, use web-based MicroPython IDEs: - BIPES (https://bipes.net.br/) - Full web-based MicroPython IDE - BeagleTerm Chrome extension for REPL access</p> <p>Network-based solutions: Configure MicroPython for WiFi connectivity (Pico W) and use network-based development tools.</p>"},{"location":"usb-debug/#enterpriseschool-chromebook-considerations","title":"Enterprise/school Chromebook considerations","text":"<p>Managed ChromeOS devices may have USB restrictions: - Contact IT administrator to whitelist Raspberry Pi Pico devices - Request addition of USB ID <code>2e8a:0005</code> to approved device list - Alternative: Use web-based development tools that don't require USB access</p>"},{"location":"usb-debug/#resolution-verification-checklist","title":"Resolution verification checklist","text":"<p>After implementing fixes, verify resolution:</p> <ul> <li>[ ] <code>lsusb</code> shows correct USB device state when connected/disconnected</li> <li>[ ] <code>/dev/ttyACM0</code> appears when Pico is connected, disappears when unplugged</li> <li>[ ] dmesg shows proper connect/disconnect events</li> <li>[ ] Thonny can connect to Pico and access REPL</li> <li>[ ] User is member of dialout and plugdev groups</li> <li>[ ] ChromeOS USB sharing is properly configured</li> <li>[ ] No phantom devices persist after physical disconnection</li> </ul> <p>Success indicators: When working correctly, connecting your Pico should show connection messages in dmesg, create <code>/dev/ttyACM0</code>, and allow Thonny to immediately detect and connect to the device. Disconnection should remove the device from <code>/dev/</code> and clear it from active USB listings.</p> <p>The root cause of \"MicroPython board in FS Mode\" persisting in lsusb output is ChromeOS/Crostini USB device caching, not a hardware problem with your Pico. Following this systematic troubleshooting approach should restore proper USB connectivity for your development workflow.</p>"}]}