{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STEM Classroom Administration with AI","text":"<p>Welcome to the STEM Classroom Administration with AI website!</p> <p>Our goal is to help you learn to use AI to generate powerful scripts to automate the administration of STEM classrooms with a focus on teaching coding, compuational thinking and physical computing using microcontrollers.</p> <p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"about/","title":"About This Website","text":"<p>This website is intended for teachers or computer administrators that are creating environments that are used by students learning STEM and specifically learning computational thinking using physical computing.  Our focus is how to setup and configure computers that allow you to use microcontrollers like the Raspberry Pi Pico on Chromebooks, Raspberry Pi as well as on PCs and Macs.</p> <p>Creating a great user experience for students using a easy-to-used development tool like Thonny can be challenging.  Although the installation steps on the Mac and PC is straightforward, the steps on Raspberry Pi Linux or a Chromebook requires many specialized skills such as using the command line and writing installation scripts using the UNIX shell language.</p> <p>Furthermore, the latest versions of some operating systems like ChromeOS make it extremely difficult to automatically use USB ports due to security concerns.  Many scripts that have worked flawlessly in the past are no longer able to configure a USB port based on events.  Manual intervention is required.</p> <p>These increased security concerns has made the life of a STEM physical computing lab more difficult than ever!</p> <p>Luckily, we have a new tool: generative AI.  These tools can generate installations scripts that are hundreds of lines long that work flawlessly and give detailed step-by-step results as they progress through the installation and configuration steps.  The quality of scripts on this site would note have been possible without these tools.  We have used OpenAI's ChatGPT and Anthropic's Claude Sonnet to generate scripts, verify they work correctly and write documentation for these scripts.</p> <p>Note that this website is intended for school computer and network administrators. It is designed to complement our other STEM textbooks:</p> <ul> <li>Beginning Python - we use Turtle Graphics to introduce students to Python</li> <li>Learning MicroPython - our largest book on physical computing</li> <li>Moving Rainbow - using low-cost LED strips to teach computational thinking</li> <li>STEM Robots - our site built around our low-cost $19 STEM robot</li> <li>Clocks and Watches - dozens of projects where student build and program their own clocks and watches</li> <li>Robot Faces - fun drawing on low-cost but bright screens to give your robot a smile</li> <li>Robot Day - a collection of resources for your school or museum to host a single day event or a course on robots</li> <li>Spectrum Analyzer - a $20 kit that uses a microphone and a display to analyze sound</li> </ul> <p>We also know that many STEM site administrators are using generative AI to help them automate classroom desktop maintenance. We have provide a sample set of prompts you can use to help you get started.</p> <p>We hope you find these tools useful and we look forward to your feedback. Feel free to use the GitHub issues if you find any areas that need correction or improvement.</p> <p>Dan McCreary July 2025</p> <p>Please contact me on LinkedIn</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"glossary/","title":"Glossary of Terms for the STEM Classroom Administration Site","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO metadata registry guideline 11179 if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#term","title":"Term","text":"<p>This is the definition of the term.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"chromebook/","title":"Administrating Chromebooks","text":""},{"location":"chromebook/#setting-up-developer-mode","title":"Setting Up Developer Mode","text":"<p>Go to Setting Up Chromebooks in Developer Mode</p>"},{"location":"chromebook/#thonny-administration","title":"Thonny Administration","text":"<p>Go to the Thonny Administration Page</p>"},{"location":"chromebook/#usb-debugging","title":"USB Debugging","text":"<p>USB Debugging</p>"},{"location":"chromebook/developer-mode/","title":"Developer Mode on ChromeOS","text":"<p>Standard mode and developer mode represent fundamentally different approaches to ChromeOS security and functionality, with developer mode offering expanded hardware access and system control at the cost of built-in security protections.</p>"},{"location":"chromebook/developer-mode/#standard-mode-normal-chromeos","title":"Standard Mode (Normal ChromeOS)","text":"<p>Standard mode prioritizes security through strict system lockdown:</p>"},{"location":"chromebook/developer-mode/#security-features","title":"Security Features","text":"<ul> <li>Verified boot - System integrity checked at every startup</li> <li>Read-only root filesystem - Core system files cannot be modified</li> <li>Sandboxed applications - All apps run in isolated containers</li> <li>Automatic updates - Security patches applied transparently</li> <li>No root access - Users cannot access system-level functions</li> </ul>"},{"location":"chromebook/developer-mode/#hardware-limitations","title":"Hardware Limitations","text":"<ul> <li>Restricted USB access - Only approved device types can connect</li> <li>Limited terminal access - Crosh terminal with basic commands only</li> <li>Container-based Linux - Crostini runs in isolated environment</li> <li>Policy enforcement - Administrator restrictions cannot be bypassed</li> </ul>"},{"location":"chromebook/developer-mode/#your-current-situation","title":"Your Current Situation","text":"<ul> <li>Jump drive appears in Files but not accessible to Linux container</li> <li><code>lsusb</code> shows no devices despite physical connections</li> <li>Chrome flags may be disabled by administrative policy</li> <li>USB sharing controlled by enterprise/education restrictions</li> </ul>"},{"location":"chromebook/developer-mode/#developer-mode-capabilities","title":"Developer Mode Capabilities","text":"<p>Developer mode removes security restrictions to enable development and system modification:</p>"},{"location":"chromebook/developer-mode/#enhanced-access","title":"Enhanced Access","text":"<ul> <li>Root shell access - Full system control via VT-2 (Ctrl+Alt+F2)</li> <li>Read-write filesystem - Ability to modify system files</li> <li>Custom firmware - Can install alternative operating systems</li> <li>Hardware debugging - Direct access to system hardware</li> <li>Unrestricted USB - Full USB device access without policy restrictions</li> </ul>"},{"location":"chromebook/developer-mode/#development-features","title":"Development Features","text":"<ul> <li>Native Linux installation - Run full Linux distributions alongside ChromeOS</li> <li>Kernel module loading - Install custom drivers and system extensions</li> <li>Cross-compilation - Build software for different architectures</li> <li>Hardware hacking - Direct GPIO, SPI, I2C access on supported devices</li> <li>Crouton support - Install Ubuntu/Debian with chroot environments</li> </ul>"},{"location":"chromebook/developer-mode/#usb-and-hardware-benefits","title":"USB and Hardware Benefits","text":"<ul> <li>Bypass USB policies - Administrative restrictions don't apply</li> <li>Direct device access - Hardware communicates without container isolation</li> <li>Custom drivers - Install specialized device drivers</li> <li>Development tools - Full access to debugging and development hardware</li> </ul>"},{"location":"chromebook/developer-mode/#security-trade-offs-and-risks","title":"Security Trade-offs and Risks","text":"<p>Developer mode fundamentally compromises ChromeOS security model:</p>"},{"location":"chromebook/developer-mode/#removed-protections","title":"Removed Protections","text":"<ul> <li>No verified boot - System integrity not enforced</li> <li>Vulnerable to malware - Root access enables system-level attacks</li> <li>Physical security risk - Anyone with device access can compromise system</li> <li>Enterprise incompatibility - Managed devices often prohibit developer mode</li> </ul>"},{"location":"chromebook/developer-mode/#warning-implications","title":"Warning Implications","text":"<ul> <li>Persistent warning screen - 30-second delay at every boot</li> <li>Easy system wipe - Pressing spacebar at warning erases everything</li> <li>No enterprise support - IT departments typically block or discourage use</li> <li>Warranty considerations - May affect support coverage</li> </ul>"},{"location":"chromebook/developer-mode/#data-security-concerns","title":"Data Security Concerns","text":"<ul> <li>Encryption bypass - Developer mode can access normally protected data</li> <li>Network vulnerability - Reduced protection against network-based attacks</li> <li>Physical access risk - Device compromise possible with brief physical access</li> </ul>"},{"location":"chromebook/developer-mode/#enabling-developer-mode-process","title":"Enabling Developer Mode Process","text":"<p>\u26a0\ufe0f WARNING: This process completely erases your Chromebook and voids enterprise management!</p>"},{"location":"chromebook/developer-mode/#prerequisites","title":"Prerequisites","text":"<ul> <li>Personal device ownership - Must not be enterprise/education managed</li> <li>Data backup - Everything will be erased during transition</li> <li>Time availability - Process takes 30-60 minutes to complete</li> <li>Understanding of risks - Security implications must be accepted</li> </ul>"},{"location":"chromebook/developer-mode/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Create recovery media - Download ChromeOS recovery image first</li> <li>Enter recovery mode - Hold Esc+Refresh, press Power button</li> <li>Enable developer mode - Press Ctrl+D at recovery screen</li> <li>Confirm transition - Press Enter to begin (erases everything)</li> <li>Wait for completion - Process takes 15-30 minutes</li> <li>Configure system - Set up ChromeOS without enterprise enrollment</li> </ol>"},{"location":"chromebook/developer-mode/#post-installation-setup","title":"Post-Installation Setup","text":"<ul> <li>Skip enterprise enrollment - Don't connect to managed networks initially</li> <li>Enable developer features - Access requires additional configuration</li> <li>Install development tools - Crouton, Linux distributions, development environments</li> </ul>"},{"location":"chromebook/developer-mode/#would-developer-mode-solve-your-usb-problem","title":"Would Developer Mode Solve Your USB Problem?","text":"<p>Yes, developer mode would likely resolve your Raspberry Pi Pico connectivity issues:</p>"},{"location":"chromebook/developer-mode/#direct-benefits","title":"Direct Benefits","text":"<ul> <li>Bypass USB policies - Administrative restrictions no longer apply</li> <li>Native hardware access - USB devices connect without container limitations</li> <li>Custom driver installation - Install specialized USB/serial drivers if needed</li> <li>Alternative development environments - Use Crouton or native Linux for programming</li> </ul>"},{"location":"chromebook/developer-mode/#alternative-solutions-to-consider-first","title":"Alternative Solutions to Consider First","text":"<p>Before enabling developer mode, try these safer approaches:</p> <ol> <li>Request IT approval - Ask for Raspberry Pi Pico USB ID (2e8a:0005) allowlisting</li> <li>Use personal device - Borrow/use unmanaged Chromebook if available</li> <li>Web-based development - Online MicroPython IDEs like BIPES</li> <li>Network programming - Use Pico W with WiFi instead of USB</li> </ol>"},{"location":"chromebook/developer-mode/#recommendation-for-your-situation","title":"Recommendation for Your Situation","text":"<p>If this is a personal Chromebook: Developer mode would solve your USB connectivity issues but consider the security trade-offs carefully.</p> <p>If this is a managed device: Contact your IT department first - enabling developer mode may violate policies and could result in device confiscation or disciplinary action.</p> <p>Alternative consideration: Many educational institutions have specific policies about developer mode. Check your acceptable use policy before proceeding.</p> <p>The decision ultimately depends on your specific needs, device ownership status, and comfort with the security implications. Developer mode is powerful but comes with significant responsibilities.</p>"},{"location":"chromebook/developer-mode/#single-user-develper-mode","title":"Single User Develper Mode","text":"<p>Prompt</p> <p>Can I put a single user into developer mode under Linux?</p> <p>No, you cannot put a single user into \"developer mode\" because developer mode is a system-wide ChromeOS setting that affects the entire Chromebook, not individual users or the Linux container.</p>"},{"location":"chromebook/developer-mode/#understanding-the-distinction","title":"Understanding the Distinction","text":""},{"location":"chromebook/developer-mode/#chromeos-developer-mode-vs-linux-user-permissions","title":"ChromeOS Developer Mode vs Linux User Permissions","text":"<p>Developer mode operates at the ChromeOS firmware/hardware level: - Affects the entire Chromebook device - Changes how the system boots and enforces security - Cannot be enabled for individual users - Requires physical access to the device and complete system wipe</p> <p>Linux user permissions operate within the container: - Affect only what users can do inside the Linux environment - Can be modified per-user within the existing system - Don't change ChromeOS hardware access policies - Won't solve USB sharing restrictions from ChromeOS to Linux</p>"},{"location":"chromebook/developer-mode/#what-you-can-do-within-the-linux-container","title":"What You CAN Do Within the Linux Container","text":""},{"location":"chromebook/developer-mode/#elevate-user-privileges","title":"Elevate User Privileges","text":"<pre><code># Add your user to sudo group (if not already)\nsudo usermod -a -G sudo $USER\n\n# Add to additional groups for hardware access\nsudo usermod -a -G dialout,plugdev,audio,video $USER\n\n# Log out and back in for changes to take effect\n</code></pre>"},{"location":"chromebook/developer-mode/#install-development-tools","title":"Install Development Tools","text":"<pre><code># Install development packages\nsudo apt update\nsudo apt install build-essential git python3-dev nodejs npm\n\n# Install USB/serial utilities\nsudo apt install minicom screen picocom setserial\n\n# Install clipboard tools\nsudo apt install xclip wl-clipboard\n</code></pre>"},{"location":"chromebook/developer-mode/#configure-usb-device-rules","title":"Configure USB Device Rules","text":"<pre><code># Create udev rules for your specific hardware\nsudo nano /etc/udev/rules.d/99-raspberry-pi-pico.rules\n\n# Add content:\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"dialout\"\n\n# Reload rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"chromebook/developer-mode/#why-this-wont-solve-your-usb-problem","title":"Why This Won't Solve Your USB Problem","text":""},{"location":"chromebook/developer-mode/#the-real-issue-chromeos-to-linux-usb-sharing","title":"The Real Issue: ChromeOS to Linux USB Sharing","text":"<p>Your problem exists at the ChromeOS system level, not within Linux:</p> <ol> <li>ChromeOS can see your USB devices (jump drive appears in Files)</li> <li>ChromeOS policy prevents sharing these devices with Linux container</li> <li>Linux container never receives USB device access from ChromeOS</li> <li>Linux user permissions are irrelevant if devices never reach Linux</li> </ol>"},{"location":"chromebook/developer-mode/#the-usb-access-chain","title":"The USB Access Chain","text":"<pre><code>Hardware \u2192 ChromeOS \u2192 USB Sharing Policy \u2192 Linux Container \u2192 User Permissions\n                          \u2191\n                    Your bottleneck is here\n</code></pre> <p>No amount of Linux user configuration can bypass ChromeOS USB sharing restrictions.</p>"},{"location":"chromebook/developer-mode/#alternative-approaches-within-current-constraints","title":"Alternative Approaches Within Current Constraints","text":""},{"location":"chromebook/developer-mode/#web-based-development","title":"Web-Based Development","text":"<p>Use browser-based MicroPython IDEs: - BIPES (https://bipes.net.br/) - Full web-based MicroPython environment - Online Python editors with MicroPython simulators - Tinkercad Circuits for electronics simulation</p>"},{"location":"chromebook/developer-mode/#network-based-programming","title":"Network-Based Programming","text":"<p>If you have a Raspberry Pi Pico W (WiFi version): <pre><code># Configure Pico W for WiFi development\nimport network\nimport socket\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('your_wifi', 'password')\n\n# Create web-based programming interface\n# Upload code via web interface instead of USB\n</code></pre></p>"},{"location":"chromebook/developer-mode/#hybrid-development-approach","title":"Hybrid Development Approach","text":"<pre><code># Develop and test code in Linux container\nnano my_pico_code.py\n\n# Use web tools to transfer code to Pico\n# Copy/paste through browser-based editors\n</code></pre>"},{"location":"chromebook/developer-mode/#request-hardware-alternatives","title":"Request Hardware Alternatives","text":"<p>Ask your institution for: - USB devices that are already allowlisted - Raspberry Pi with network connectivity - Development boards with browser-based programming - Simulators that don't require physical hardware</p>"},{"location":"chromebook/developer-mode/#what-about-sudo-access","title":"What About sudo Access?","text":""},{"location":"chromebook/developer-mode/#you-likely-already-have-it","title":"You Likely Already Have It","text":"<pre><code># Check if you have sudo access\nsudo -l\n\n# If you get output showing permissions, you already have developer-level access within Linux\n</code></pre>"},{"location":"chromebook/developer-mode/#verify-your-current-permissions","title":"Verify Your Current Permissions","text":"<pre><code># Check your groups\ngroups\n\n# Check USB device access (even though devices aren't shared)\nls -la /dev/ttyACM* /dev/ttyUSB*\n\n# Check if you can install packages\nsudo apt update\n</code></pre>"},{"location":"chromebook/developer-mode/#the-bottom-line","title":"The Bottom Line","text":"<p>The limitation you're facing is administrative/policy-based, not technical or user permission-based. Even with full root access within the Linux container, you cannot bypass ChromeOS USB sharing policies that prevent devices from reaching the container in the first place.</p> <p>Your options are: 1. Request IT approval for USB device access 2. Use web-based development tools that don't require USB 3. Switch to a personal/unmanaged device for development 4. Enable ChromeOS developer mode (if allowed and you accept security risks)</p> <p>Linux user permissions alone cannot solve USB hardware access restrictions imposed by ChromeOS system policies.</p>"},{"location":"chromebook/setting-up-developer-mode/","title":"Step by Step Guide for Setting Up Developer Mode","text":""},{"location":"chromebook/setting-up-developer-mode/#how-to-put-a-chromebook-into-developer-mode-step-by-step-guide","title":"How to Put a Chromebook into Developer Mode: Step-by-Step Guide","text":"<p>\u26a0\ufe0f Warning: Enabling Developer Mode will wipe all local data, including files, apps, and settings. Be sure to back up anything important before you begin.</p>"},{"location":"chromebook/setting-up-developer-mode/#step-0-prepare","title":"\u2705 Step 0: Prepare","text":"<ul> <li>Backup your data (Google Drive, USB stick, or external hard drive).</li> <li>Make sure your Chromebook is charged or plugged in.</li> <li>Know that Developer Mode disables verified boot, so you\u2019ll see a scary screen every time you start up \u2014 this is expected.</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#step-1-enter-recovery-mode","title":"\ud83e\uddd1\u200d\ud83d\udcbb Step 1: Enter Recovery Mode","text":"<ol> <li>Turn off your Chromebook.</li> <li> <p>Press and hold these keys simultaneously:</p> </li> <li> <p>Esc + Refresh (\ud83d\udd01), then press the Power button.</p> </li> <li>Release all keys when you see a white screen with a yellow exclamation mark or a message like \"Chrome OS is missing or damaged.\"</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#step-2-enable-developer-mode","title":"\u2699\ufe0f Step 2: Enable Developer Mode","text":"<ol> <li>On the recovery screen, press Ctrl + D.</li> <li>You will be prompted:    \u201cTo turn OS verification OFF, press ENTER.\u201d</li> <li>Press Enter.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#step-3-wait-for-powerwash-device-reset","title":"\ud83e\uddf9 Step 3: Wait for Powerwash (Device Reset)","text":"<ul> <li>The system will reboot and begin the transition to Developer Mode.</li> <li>This takes 5 to 10 minutes. You\u2019ll see a screen that says:</li> </ul> <p>\"Preparing system for Developer Mode. This may take a while.\"</p> <p>This process erases all local data (Powerwash), and once complete, the device will reboot again.</p>"},{"location":"chromebook/setting-up-developer-mode/#step-4-startup-behavior-in-developer-mode","title":"\u26a0\ufe0f Step 4: Startup Behavior in Developer Mode","text":"<p>Every time you boot, you\u2019ll see a \u201cOS verification is OFF\u201d screen.</p> <ul> <li>To continue booting: press Ctrl + D or wait 30 seconds.</li> <li>To go back to normal mode: press Spacebar, then confirm.</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#step-5-access-the-linux-shell-crosh-and-bash","title":"\ud83d\udee0\ufe0f Step 5: Access the Linux Shell (Crosh and Bash)","text":"<ol> <li>Once booted, sign into Wi-Fi.</li> <li>Press Ctrl + Alt + T to open Crosh (Chrome Shell).</li> <li>Type <code>shell</code> and press Enter.</li> <li>Now you are in a full Bash shell and can run commands like <code>sudo</code>, install dev tools, or run scripts.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#optional-disable-root-file-system-verification","title":"\ud83e\uddef Optional: Disable Root File System Verification","text":"<p>If you're doing root-level development:</p> <pre><code>sudo su\n/usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification\n</code></pre> <p>Then reboot.</p>"},{"location":"chromebook/setting-up-developer-mode/#to-exit-developer-mode-re-enable-verified-boot","title":"\ud83d\udd04 To Exit Developer Mode (Re-enable Verified Boot)","text":"<ol> <li>Reboot your Chromebook.</li> <li>On the \"OS verification is OFF\" screen, press Spacebar.</li> <li>Confirm when prompted \u2014 this will Powerwash again and return to normal mode.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#developer-mode-enabled","title":"\u2705 Developer Mode Enabled!","text":"<p>You\u2019re now ready to:</p> <ul> <li>Install custom Linux distros</li> <li>Sideload APKs (on supported Chromebooks)</li> <li>Access full root shell</li> <li>Modify system files and services</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#references","title":"References","text":"<p>YouTube Video Showing Steps to Put Chromebook into Developer Mode</p>"},{"location":"chromebook/thonny-admin/","title":"Thonny Admin","text":"<p>Here are steps to configure Thonny on the Chromebook.  Note that you must have the Chromebook to first be in Developer Mode.</p> <p>Due to security concerns, there is NO automatic way to allow a non-standard USB device to be connected.  You MUST got to the Chromebook Setting and enable the USB device each time you plug any non-standard USB devices into the USB port.</p>"},{"location":"chromebook/thonny-admin/#setup-process","title":"Setup Process","text":""},{"location":"chromebook/thonny-admin/#step-1-enable-linux-development-environment","title":"Step 1: Enable Linux Development Environment","text":"<p>Go to the Setting up ChromeOS in Developer Mode</p>"},{"location":"chromebook/thonny-admin/#step-2-thonny-installation","title":"Step 2: Thonny Installation","text":"<p>Instead of using <code>apt install thonny</code> (which often installs older versions of Thonny), the best practices is to use the official installer that runs under pip directly from the Thonny website.</p> <pre><code># Update system first\nsudo apt update\n\n# Install latest Thonny with Python bundle\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n</code></pre> <p>This method installs the current version (3.3.10+) rather than the outdated Debian package version, avoiding compatibility issues.</p>"},{"location":"chromebook/thonny-admin/#step-3-configure-usb-access","title":"Step 3: Configure USB Access","text":"<ol> <li>Go to Settings \u2192 About ChromeOS \u2192 Developers \u2192 Linux development environment</li> <li>Click Manage USB devices</li> <li>Connect your USB device (Arduino, Raspberry Pi Pico, etc.)</li> <li>Enable the device in the list</li> <li>Add user to dialout group: <code>sudo usermod -a -G dialout $USER</code></li> <li>Restart the Linux container (Settings \u2192 Developers \u2192 Linux \u2192 Advanced \u2192 Restart)</li> </ol>"},{"location":"chromebook/thonny-admin/#step-4-create-desktop-launcher","title":"Step 4: Create Desktop Launcher","text":"<p>Make Thonny easily accessible:</p> <pre><code># Create desktop file for launcher\ncat &gt; ~/.local/share/applications/thonny.desktop &lt;&lt; EOF\n[Desktop Entry]\nName=Thonny\nComment=Python IDE for beginners\nExec=thonny %F\nIcon=thonny\nTerminal=false\nType=Application\nCategories=Development;IDE;\nMimeType=text/x-python;\nEOF\n\n# Make executable\nchmod +x ~/.local/share/applications/thonny.desktop\n</code></pre>"},{"location":"chromebook/thonny-admin/#batch-script-approach","title":"Batch Script Approach","text":"<p>Create a setup script to automate the software installation:</p> <pre><code>#!/bin/bash\n# Save as setup_thonny.sh\n\necho \"Setting up Thonny development environment...\"\n\n# Update system\nsudo apt update\n\n# Install Thonny\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n\n# Add user to dialout group\nsudo usermod -a -G dialout $USER\n\n# Create desktop launcher\ncat &gt; ~/.local/share/applications/thonny.desktop &lt;&lt; EOF\n[Desktop Entry]\nName=Thonny\nComment=Python IDE for beginners\nExec=thonny %F\nIcon=thonny\nTerminal=false\nType=Application\nCategories=Development;IDE;\nMimeType=text/x-python;\nEOF\n\nchmod +x ~/.local/share/applications/thonny.desktop\n\necho \"Setup complete! Please restart Linux container and connect USB devices.\"\necho \"Go to Settings &gt; Developers &gt; Linux &gt; Manage USB devices to enable your hardware.\"\n</code></pre> <p>Run with: <code>bash setup_thonny.sh</code></p>"},{"location":"chromebook/thonny-admin/#step-by-step-create-a-thonny-launcher-on-chromeos","title":"Step-by-Step: Create a Thonny Launcher on ChromeOS","text":""},{"location":"chromebook/thonny-admin/#1-create-a-desktop-file","title":"1. Create a <code>.desktop</code> file","text":"<p>Run this command in your Linux terminal:</p> <pre><code>nano ~/.local/share/applications/thonny.desktop\n</code></pre>"},{"location":"chromebook/thonny-admin/#2-paste-the-following-contents-adjusting-username-if-needed","title":"2. Paste the following contents (adjusting username if needed):","text":"<pre><code>[Desktop Entry]\nVersion=1.0\nType=Application\nName=Thonny\nGenericName=Python IDE\nComment=Thonny IDE for MicroPython and Python development\nExec=env TK_USE_PLATFORM_MENUBAR=0 /home/urocdeveloper01/thonny-venv/bin/thonny\nIcon=python3\nTerminal=false\nCategories=Development;Education;IDE;\nStartupNotify=true\n</code></pre> <p>Replace <code>/home/urocdeveloper01/</code> with the correct path if your username is different. You can check your username with <code>whoami</code>.</p>"},{"location":"chromebook/thonny-admin/#3-save-and-exit-the-editor","title":"\ud83d\udcbe 3. Save and exit the editor:","text":"<ul> <li>Press <code>Ctrl+O</code> to save</li> <li>Press <code>Enter</code> to confirm the file name</li> <li>Press <code>Ctrl+X</code> to exit Nano</li> </ul>"},{"location":"chromebook/thonny-admin/#4-optional-add-a-custom-icon","title":"4. (Optional) Add a custom icon","text":"<p>If you want a real Thonny icon:</p> <pre><code>mkdir -p ~/.local/share/icons\nwget https://en.wikipedia.org/wiki/Thonny#/media/File:Thonny_logo.png -O ~/.local/share/icons/thonny.png\n</code></pre> <p>Then change the <code>Icon=</code> line in the <code>.desktop</code> file:</p> <pre><code>Icon=/home/urocdeveloper01/.local/share/icons/thonny.png\n</code></pre>"},{"location":"chromebook/thonny-admin/#5-refresh-the-launcher","title":"5. Refresh the launcher","text":"<p>Now restart your Linux container or run:</p> <pre><code>update-desktop-database ~/.local/share/applications\n</code></pre> <p>Then:</p> <ul> <li>Open your ChromeOS launcher</li> <li>Scroll down to \u201cLinux apps\u201d</li> <li>You should now see Thonny with a Python icon!</li> </ul> <p>You can right-click it and pin it to the shelf for even faster access.</p>"},{"location":"chromebook/usb-debug/","title":"Raspberry Pi Pico USB Issues on ChromeOS Crostini: Complete Troubleshooting Guide","text":"<p>The \"MicroPython board in FS Mode\" showing in lsusb after disconnection indicates a USB device caching issue in ChromeOS/Crostini, not a hardware problem with the Pico. This comprehensive guide provides systematic solutions to restore proper USB connectivity for your Raspberry Pi Pico and Thonny IDE on ChromeOS Linux containers.</p>"},{"location":"chromebook/usb-debug/#understanding-the-core-issue","title":"Understanding the core issue","text":"<p>Critical insight: \"MicroPython board in FS Mode\" is the normal, expected state when MicroPython firmware is running properly on your Pico. The problem isn't a \"stuck\" Pico, but rather ChromeOS/Crostini's USB subsystem not properly detecting the disconnection. This creates phantom device entries that prevent new connections from working correctly.</p> <p>Device identification: Your Pico appears with USB ID <code>2E8A:0005</code> in MicroPython mode and shows as a serial device at <code>/dev/ttyACM0</code>. The persistent lsusb listing suggests the Crostini container hasn't updated its USB device cache after disconnection.</p>"},{"location":"chromebook/usb-debug/#immediate-diagnostic-steps","title":"Immediate diagnostic steps","text":"<p>Start with these commands to assess the current state:</p> <pre><code># Check current USB device status\nlsusb | grep -E \"(MicroPython|2e8a)\"\nls -la /dev/ttyACM* 2&gt;/dev/null\ndmesg | grep -i usb | tail -10\n\n# Monitor for real disconnection events  \ndmesg -w | grep -i usb &amp;\n# Now physically disconnect/reconnect the Pico and observe output\n</code></pre> <p>If dmesg shows no disconnect events when unplugging, the issue is confirmed as container-level USB caching.</p>"},{"location":"chromebook/usb-debug/#step-by-step-resolution-procedures","title":"Step-by-step resolution procedures","text":""},{"location":"chromebook/usb-debug/#method-1-container-restart-recommended-first-attempt","title":"Method 1: Container restart (recommended first attempt)","text":"<p>ChromeOS Crostini uses a layered architecture where USB devices are forwarded from the host through the Termina VM to your Penguin container. Restarting the container often clears cached USB device state.</p> <pre><code># From ChromeOS: Right-click Terminal icon in shelf \u2192 \"Shut down Linux\"\n# Wait 30 seconds, then reopen Terminal\n# Verify device cache is cleared:\nlsusb | grep -E \"(MicroPython|2e8a)\"\n</code></pre> <p>Alternative container restart via crosh: <pre><code># Press Ctrl+Alt+T to open crosh terminal\ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina\n# Exit crosh and restart Terminal\n</code></pre></p>"},{"location":"chromebook/usb-debug/#method-2-usb-subsystem-reset-within-container","title":"Method 2: USB subsystem reset within container","text":"<p>If container restart doesn't resolve the issue, force a USB subsystem refresh:</p> <pre><code># Reset USB device enumeration\nsudo systemctl restart systemd-udevd\n\n# Reload and trigger udev rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger --subsystem-match=usb\n\n# Clear any cached device listings\nsudo modprobe -r usbserial\nsudo modprobe usbserial\n</code></pre>"},{"location":"chromebook/usb-debug/#method-3-chromeos-usb-device-management","title":"Method 3: ChromeOS USB device management","text":"<p>ChromeOS requires explicit USB device sharing with Linux containers. Reset the sharing configuration:</p> <ol> <li>Navigate to: ChromeOS Settings \u2192 Advanced \u2192 Developers \u2192 Linux development environment \u2192 Manage USB devices</li> <li>If \"Board in FS Mode\" or similar Pico device is listed, toggle it OFF then ON</li> <li>If no Pico device appears, physically reconnect while holding BOOTSEL button</li> <li>The Pico should appear as \"RPI-RP2\" drive first, then as \"MicroPython board\" after releasing BOOTSEL</li> </ol> <p>Enable advanced USB support via Chrome flags: <pre><code>chrome://flags/#crostini-usb-allow-unsupported\n</code></pre> Set to \"Enabled\" and restart Chrome.</p>"},{"location":"chromebook/usb-debug/#method-4-complete-vm-restart","title":"Method 4: Complete VM restart","text":"<p>For persistent issues, restart the entire Termina VM:</p> <pre><code># In crosh (Ctrl+Alt+T):\ncrosh&gt; vmc list              # Verify termina is running  \ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina --enable-audio-capture\n</code></pre> <p>This performs a complete reset of the USB forwarding layer between ChromeOS and your container.</p>"},{"location":"chromebook/usb-debug/#thonny-ide-connectivity-restoration","title":"Thonny IDE connectivity restoration","text":"<p>Once USB device caching is resolved, configure Thonny for reliable Pico connectivity:</p>"},{"location":"chromebook/usb-debug/#install-thonny-correctly-on-chromeos","title":"Install Thonny correctly on ChromeOS","text":"<pre><code># Update system and install dependencies\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install python3-tk python3-pip wget curl -y\n\n# Install Thonny using official installer (recommended)\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n\n# Installation path: ~/apps/thonny/bin/thonny\n</code></pre>"},{"location":"chromebook/usb-debug/#configure-serial-port-permissions","title":"Configure serial port permissions","text":"<pre><code># Add user to dialout group for serial access\nsudo usermod -a -G dialout $USER\nsudo usermod -a -G plugdev $USER\n\n# Remove brltty conflicts (common on Ubuntu 22.04+)\nsudo apt purge brltty -y\n\n# Reboot to apply group changes\nsudo reboot\n</code></pre>"},{"location":"chromebook/usb-debug/#set-up-thonny-interpreter","title":"Set up Thonny interpreter","text":"<ol> <li>Launch Thonny: <code>~/apps/thonny/bin/thonny</code></li> <li>Go to Run \u2192 Select interpreter</li> <li>Choose MicroPython (Raspberry Pi Pico) or MicroPython (generic)</li> <li>If using generic, manually select port: <code>/dev/ttyACM0</code></li> <li>Test connection: <pre><code>print(\"Hello from Pico!\")\nhelp()\n</code></pre></li> </ol>"},{"location":"chromebook/usb-debug/#advanced-troubleshooting-for-persistent-issues","title":"Advanced troubleshooting for persistent issues","text":""},{"location":"chromebook/usb-debug/#fix-udev-rules-and-permissions","title":"Fix udev rules and permissions","text":"<p>Create comprehensive USB permission rules:</p> <pre><code># Create universal USB permissions rule\nsudo tee /etc/udev/rules.d/99-pico-permissions.rules &lt;&lt; 'EOF'\n# Raspberry Pi Pico permissions\nKERNEL==\"ttyACM[0-9]*\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"dialout\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0003\", MODE=\"0666\", GROUP=\"plugdev\"\nEOF\n\n# Apply rules immediately\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"chromebook/usb-debug/#hardware-level-pico-reset-procedures","title":"Hardware-level Pico reset procedures","text":"<p>If the Pico appears genuinely unresponsive (rare), perform a hardware reset:</p> <p>Method 1 - BOOTSEL reset: 1. Hold BOOTSEL button on Pico 2. Connect USB cable (or press/release reset button if available) 3. Release BOOTSEL button 4. Pico appears as \"RPI-RP2\" drive 5. Install fresh MicroPython firmware from https://micropython.org/download/rp2-pico/</p> <p>Method 2 - Software reset from MicroPython: <pre><code># In Thonny or Python REPL:\nimport machine\nmachine.bootloader()  # Forces Pico into BOOTSEL mode\n</code></pre></p>"},{"location":"chromebook/usb-debug/#comprehensive-system-verification","title":"Comprehensive system verification","text":"<p>Create a verification script to check all components:</p> <pre><code>#!/bin/bash\necho \"=== ChromeOS Crostini Pico Diagnostics ===\"\necho \"USB devices:\"\nlsusb | grep -E \"(2e8a|MicroPython)\" || echo \"No Pico devices found\"\n\necho -e \"\\nSerial devices:\"\nls -la /dev/ttyACM* 2&gt;/dev/null || echo \"No ACM devices\"\n\necho -e \"\\nUser groups:\"\ngroups $USER | grep -E \"(dialout|plugdev)\" || echo \"Missing required groups\"\n\necho -e \"\\nCrOS USB sharing status:\"\nls -la /mnt/chromeos/removable/ | grep -i pico || echo \"No shared devices\"\n\necho -e \"\\nRecent USB events:\"\ndmesg | grep -i usb | tail -5\n\necho -e \"\\nThonny installation:\"\ntest -f ~/apps/thonny/bin/thonny &amp;&amp; echo \"Thonny installed correctly\" || echo \"Thonny not found\"\n</code></pre>"},{"location":"chromebook/usb-debug/#prevention-and-monitoring","title":"Prevention and monitoring","text":""},{"location":"chromebook/usb-debug/#set-up-usb-monitoring","title":"Set up USB monitoring","text":"<p>Monitor USB events to catch future issues early:</p> <pre><code># Real-time USB event monitoring\nudevadm monitor --subsystem-match=usb &amp;\ndmesg -w | grep -i usb &amp;\n</code></pre>"},{"location":"chromebook/usb-debug/#disable-problematic-power-management","title":"Disable problematic power management","text":"<p>USB autosuspend can cause connectivity issues:</p> <pre><code># Disable autosuspend for Pico devices\necho 'ACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTR{power/autosuspend}=\"-1\"' | sudo tee -a /etc/udev/rules.d/50-usb-autosuspend.rules\n\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"chromebook/usb-debug/#when-all-else-fails","title":"When all else fails","text":""},{"location":"chromebook/usb-debug/#alternative-development-approaches","title":"Alternative development approaches","text":"<p>Web-based development: If USB continues to fail, use web-based MicroPython IDEs: - BIPES (https://bipes.net.br/) - Full web-based MicroPython IDE - BeagleTerm Chrome extension for REPL access</p> <p>Network-based solutions: Configure MicroPython for WiFi connectivity (Pico W) and use network-based development tools.</p>"},{"location":"chromebook/usb-debug/#enterpriseschool-chromebook-considerations","title":"Enterprise/school Chromebook considerations","text":"<p>Managed ChromeOS devices may have USB restrictions: - Contact IT administrator to whitelist Raspberry Pi Pico devices - Request addition of USB ID <code>2e8a:0005</code> to approved device list - Alternative: Use web-based development tools that don't require USB access</p>"},{"location":"chromebook/usb-debug/#resolution-verification-checklist","title":"Resolution verification checklist","text":"<p>After implementing fixes, verify resolution:</p> <ul> <li>[ ] <code>lsusb</code> shows correct USB device state when connected/disconnected</li> <li>[ ] <code>/dev/ttyACM0</code> appears when Pico is connected, disappears when unplugged</li> <li>[ ] dmesg shows proper connect/disconnect events</li> <li>[ ] Thonny can connect to Pico and access REPL</li> <li>[ ] User is member of dialout and plugdev groups</li> <li>[ ] ChromeOS USB sharing is properly configured</li> <li>[ ] No phantom devices persist after physical disconnection</li> </ul> <p>Success indicators: When working correctly, connecting your Pico should show connection messages in dmesg, create <code>/dev/ttyACM0</code>, and allow Thonny to immediately detect and connect to the device. Disconnection should remove the device from <code>/dev/</code> and clear it from active USB listings.</p> <p>The root cause of \"MicroPython board in FS Mode\" persisting in lsusb output is ChromeOS/Crostini USB device caching, not a hardware problem with your Pico. Following this systematic troubleshooting approach should restore proper USB connectivity for your development workflow.</p>"},{"location":"concepts/","title":"Core Concepts in Administrating a STEM Classroom with Physical Computing","text":""},{"location":"concepts/#usb-port-administration","title":"USB Port Administration","text":"<p>One of the most challenging problem with setting up a STEM physical computing classroom us allowing students to plug in a USB device.  We cover this in this chapter:</p> <p>Go to the USB Port Administration Chapter</p>"},{"location":"concepts/#usb-power-draw","title":"USB Power Draw","text":"<p>Although 99.9% of the time our labs only use a small amount of power - under 100 milliamps. This is under 10% of the power that most USB ports provide.  However, when students are driving motors or large sets of LEDs, we can run into problems.  This chapter guides you through the way computers supply power to USB devices and how to monitor and recover from power draw issues.</p> <p>Go to the USB Power Draw Chapter</p>"},{"location":"concepts/#generating-raspberry-pi-images","title":"Generating Raspberry Pi Images","text":"<p>Go to the Generating Raspberry Pi Images Chapter</p>"},{"location":"concepts/gen-pi-images/","title":"Generating Customized Images for the Raspberry Pi","text":"<p>The best tool for generating images for a Raspberry Pi is  a tool called Raspberry Pi Imager</p> <p>Setting up Raspberry Pi systems for educational environments requires reliable, efficient tools for creating and deploying customized operating system images. This chapter explores the essential software tools, storage options, and best practices for generating and deploying Raspberry Pi images in STEM classroom environments.</p>"},{"location":"concepts/gen-pi-images/#raspberry-pi-imager-the-official-solution","title":"Raspberry Pi Imager: The Official Solution","text":""},{"location":"concepts/gen-pi-images/#overview-and-features","title":"Overview and Features","text":"<p>Raspberry Pi Imager is the quick and easy way to install Raspberry Pi OS and other operating systems to a microSD card, ready to use with your Raspberry Pi. This official tool has evolved significantly since its introduction and now offers comprehensive customization options perfect for classroom deployment.</p> <p>Raspberry Pi Imager 1.9.4 has been released as the latest stable version, bringing various UI improvements, new translations, and bug fixes. The current version includes several features that make it particularly valuable for educational environments:</p> <p>Advanced OS Customization: The OS customisation menu lets you set up your Raspberry Pi before first boot. You can preconfigure hostname, username and password, wireless LAN settings, locale settings, and SSH access.</p> <p>Multi-Platform Support: The imager runs on Windows, macOS, and Linux, making it accessible regardless of your institution's preferred operating system. The minimum supported Ubuntu version for the DEB version is Ubuntu 22.04 LTS, but the AppImage build may run on older versions.</p> <p>Enhanced Security Features: In the OS customisation settings there's an Enable SSH tab that now uses \"regex to perform some light validation\" of public keys to avoid boot failures.</p>"},{"location":"concepts/gen-pi-images/#installation-and-setup","title":"Installation and Setup","text":"<p>The Raspberry Pi Imager can be downloaded from the official Raspberry Pi website at https://www.raspberrypi.com/software/. The tool automatically detects your operating system and provides the appropriate download, though you can manually select versions for different platforms.</p> <p>Key Installation Points: - Windows versions support both 32-bit and 64-bit architectures - macOS versions include both Intel and Apple Silicon support - Linux users can choose between DEB packages and AppImage formats - Wayland client support in the Raspberry Pi Imager AppImage build has been disabled for stability reasons</p>"},{"location":"concepts/gen-pi-images/#advanced-configuration-options","title":"Advanced Configuration Options","text":"<p>For classroom deployments, the advanced configuration features are particularly valuable:</p> <p>Network Pre-configuration: If your network does not broadcast an SSID publicly, you should enable the \"Hidden SSID\" setting. By default, Imager uses the country you're currently in as the \"Wireless LAN country\".</p> <p>User Account Setup: The username and password option defines the username and password of the admin user account on your Raspberry Pi, with Imager now defaulting to using the username of the logged-in user instead of 'pi'.</p> <p>SSH Configuration: Choose Allow public-key authentication only to preconfigure your Raspberry Pi for passwordless public-key SSH authentication using a private key from the computer you're currently using.</p>"},{"location":"concepts/gen-pi-images/#balenaetcher-cross-platform-alternative","title":"BalenaEtcher: Cross-Platform Alternative","text":""},{"location":"concepts/gen-pi-images/#why-consider-balenaetcher","title":"Why Consider BalenaEtcher?","text":"<p>BalenaEtcher (commonly referred to and formerly known as Etcher) is a free and open-source utility used for writing image files such as .iso and .img files, as well as zipped folders onto storage media to create live SD cards and USB flash drives.</p> <p>While Raspberry Pi Imager is the official tool, BalenaEtcher offers several advantages in certain scenarios:</p> <p>Broader Format Support: The possibilities balenaEtcher offers are enormous and it supports the following formats: ISO, IMG, ZIP, DMG, DSK, RAW, XZ, BZ2, HDDIMG, GZ, and ETCH.</p> <p>Cross-Platform Consistency: BalenaEtcher is a great cross-platform solution that can be downloaded on Windows, macOS, and Linux. It is especially helpful if you regularly switch between operating systems and need a tool that supports various environments.</p> <p>Enhanced Safety Features: BalenaEtcher prioritizes the safety and security of users' data and devices. It prevents accidental flashing of important storage devices like internal hard drives or system partitions.</p>"},{"location":"concepts/gen-pi-images/#installation-and-usage","title":"Installation and Usage","text":"<p>BalenaEtcher can be downloaded from https://etcher.balena.io/. The installation process is straightforward across all platforms:</p> <p>System Requirements: - Etcher works on Microsoft Windows 10 and later, Linux (most distros) and macOS 10.10 (Yosemite) and later - For Windows 7, 8 or 32 bits, the latest compatible version of Etcher is v7.9.0</p> <p>Key Features for Educational Use: - Balena Etcher incorporates a built-in image validation feature. During the flashing process, the tool checks the integrity and authenticity of the selected OS image - Smart Device Selection: Balena Etcher simplifies the process of choosing the correct target device for flashing - Live Feedback and Progress Monitoring: Balena Etcher provides live feedback during the flashing process, keeping users informed of the progress</p>"},{"location":"concepts/gen-pi-images/#recent-updates-and-privacy","title":"Recent Updates and Privacy","text":"<p>As of 2025-05-07, balenaEtcher has removed analytics features, focusing on privacy improvements. This makes it even more suitable for educational environments where data privacy is a concern.</p>"},{"location":"concepts/gen-pi-images/#microsd-cards-benefits-limitations-and-reliability","title":"MicroSD Cards: Benefits, Limitations, and Reliability","text":""},{"location":"concepts/gen-pi-images/#benefits-of-microsd-cards","title":"Benefits of MicroSD Cards","text":"<p>MicroSD cards have been the traditional storage solution for Raspberry Pi devices since the beginning. They offer several advantages for educational deployments:</p> <p>Accessibility and Cost: MicroSD cards are widely available and relatively inexpensive, making them ideal for large classroom deployments where budget constraints are important.</p> <p>Portability: The small form factor makes it easy to swap between different Pi units or create backup copies of working configurations.</p> <p>Simplicity: All Raspberry Pi consumer models since the Raspberry Pi 1 Model A+ feature a microSD slot. Your Raspberry Pi automatically boots from the microSD slot when the slot contains a card.</p>"},{"location":"concepts/gen-pi-images/#limitations-and-reliability-concerns","title":"Limitations and Reliability Concerns","text":"<p>However, MicroSD cards come with significant limitations that educators should understand:</p> <p>Performance Limitations: SD cards are inherently slower compared to other storage options like USB drives or solid-state drives (SSDs). As the Raspberry Pi writes and deletes data on the SD card over time, the performance may degrade.</p> <p>Durability Issues: In applications where the Raspberry Pi writes data frequently, such as logging or databases, the constant read/write operations can significantly shorten the lifespan of the SD card.</p> <p>Corruption Risks: SD cards are prone to corruption, especially in scenarios where the Raspberry Pi experiences sudden power loss or improper shutdowns. Users report frequent issues such as data corruption and unexpected failures, particularly when cards are subjected to the constant read-write cycles typical in SBC applications.</p> <p>Capacity Constraints: SD cards typically offer limited storage capacity compared to alternative storage solutions like USB drives or SSDs.</p>"},{"location":"concepts/gen-pi-images/#performance-expectations","title":"Performance Expectations","text":"<p>Understanding realistic performance expectations helps in project planning:</p> <p>Basic Performance: In practice, you'll get about 100MB/s out of an SD card in a Pi</p> <p>Raspberry Pi 5 Improvements: The SD card interface on the Pi5 has doubled in speed over the Pi 4 so that is a pretty good improvement</p>"},{"location":"concepts/gen-pi-images/#best-practices-for-microsd-reliability","title":"Best Practices for MicroSD Reliability","text":"<p>To maximize MicroSD card reliability in classroom environments:</p> <p>Choose Quality Cards: Cards that are \"A\" rated are compliant with the SD Association Application Performance Class standard and are optimized for running applications as well as storing data.</p> <p>Proper Power Supply: The Raspberry Pi also needs a very good USB power supply, especially the Pi 3 and Pi 4. The official power supplies are great. With good quality storage and a good quality power supply like we can get these days, the Raspberry Pi is very reliable.</p> <p>Regular Backups: Given the potential for failure, implementing a regular backup strategy is essential for educational deployments.</p>"},{"location":"concepts/gen-pi-images/#official-raspberry-pi-microsd-cards","title":"Official Raspberry Pi MicroSD Cards","text":""},{"location":"concepts/gen-pi-images/#introduction-and-features","title":"Introduction and Features","text":"<p>Raspberry Pi launched official microSD cards, working on command queuing within the Raspberry Pi OS for improved performance. These cards are specifically optimized for Raspberry Pi hardware.</p> <p>Performance Optimization: At the moment, the Official Raspberry Pi SD Card is definitely the one you need. This SD card ranked first in all tests, often well ahead of others.</p> <p>Command Queuing Support: Command queuing support for microSD cards allows the microSD card to queue commands/tasks and perform them in the most efficient way possible, allowing it to perform many tasks faster than it would without it.</p>"},{"location":"concepts/gen-pi-images/#availability-and-specifications","title":"Availability and Specifications","text":"<p>The official Raspberry Pi microSD cards are available at https://www.raspberrypi.com/products/sd-cards/ in multiple capacities. Initially, distributors were offering 32/64GB variants, often with Raspberry Pi OS pre-installed.</p> <p>Performance Benefits: The 32GB Raspberry Pi microSD card sees the most benefit from command queuing, but when we move up to the 64 and 128GB capacities, we're already seeing them perform close to their limits.</p>"},{"location":"concepts/gen-pi-images/#cost-considerations","title":"Cost Considerations","text":"<p>The 128GB microSD card purchased from BERRYBASE was around $15.70 including taxes, and the 256GB Raspberry Pi NVMe SSD was around $37 including taxes. When you throw in the performance gains, it's worth the investment for demanding applications.</p>"},{"location":"concepts/gen-pi-images/#nvme-drives-and-raspberry-pi-5-the-next-generation","title":"NVMe Drives and Raspberry Pi 5: The Next Generation","text":""},{"location":"concepts/gen-pi-images/#introduction-to-nvme-on-raspberry-pi-5","title":"Introduction to NVMe on Raspberry Pi 5","text":"<p>The new external PCIe port makes it possible to boot the standard Pi 5 model B directly off NVMe storage\u2014an option which is much faster and more reliable than standard microSD storage.</p> <p>The Raspberry Pi 5's PCIe interface opens up new possibilities for high-performance storage in educational computing environments.</p>"},{"location":"concepts/gen-pi-images/#performance-benefits","title":"Performance Benefits","text":"<p>Dramatic Speed Improvements: Its PCIe speeds are limited to the point where you'll get around 700-800 MB/s out of an NVME when reading data, and about half that when writing data.</p> <p>Real-World Performance: A simple speed test showed the NVME HAT on my Pi5 is roughly 18x faster than a good uSD card on the old Pi4.</p> <p>Boot Time Improvements: Similar to microSD, around 6-8 seconds with Pi OS. The boot time is highly optimized, and the NVMe's speed advantage isn't as great there as other storage-related tasks like file copies, installs, launching heavy apps.</p>"},{"location":"concepts/gen-pi-images/#enhanced-reliability","title":"Enhanced Reliability","text":"<p>Durability Advantages: It's not just about speed, though. NVMe storage is also more durable than MicroSD cards. MicroSD cards can wear out quickly under heavy use, while NVMe drives are built to handle consistent data loads over time.</p> <p>Better Error Handling: NVMe drives typically include more sophisticated wear leveling and error correction capabilities compared to MicroSD cards.</p>"},{"location":"concepts/gen-pi-images/#setup-requirements","title":"Setup Requirements","text":"<p>Hardware Prerequisites: To use NVMe with Raspberry Pi 5, you'll need: - A Raspberry Pi 5 (older models don't support PCIe) - An M.2 HAT or adapter (various manufacturers available) - A compatible NVMe SSD</p> <p>Software Configuration: Enabling NVMe boot is pretty easy, you add a line to /boot/firmware/config.txt, modify the BOOT_ORDER in the bootloader configuration, and reboot!</p> <p>PCIe Speed Considerations: You can double the speed of NVMe by adding \"dtparam=pciex1_gen=3\" to config.txt, with hdparm reporting 749.57 MB/sec, though the Pi is only officially rated for PCIe Gen 2 speeds.</p>"},{"location":"concepts/gen-pi-images/#cost-analysis","title":"Cost Analysis","text":"<p>Economic Considerations: The difference in price per GB when comparing an A2 SD card with 512GB storage to an NVMe SSD of the same capacity isn't earth-shattering. For 256GB models, there is a $10 difference, but the benefits outweigh the cost.</p> <p>Long-term Value: While the initial investment is higher, the improved reliability and performance can reduce maintenance overhead in classroom environments.</p>"},{"location":"concepts/gen-pi-images/#storage-comparison-microsd-vs-nvme-drives","title":"Storage Comparison: MicroSD vs NVMe Drives","text":""},{"location":"concepts/gen-pi-images/#performance-comparison-table","title":"Performance Comparison Table","text":"Specification MicroSD Card NVMe SSD (Pi 5) Read Speed ~100 MB/s 700-800 MB/s Write Speed ~50-70 MB/s 350-450 MB/s Random Read (IOPS) 2,000-4,000 18,000-30,000 Random Write (IOPS) 500-1,000 17,000-50,000 Boot Time 8-12 seconds 6-8 seconds Capacity Range 16GB-1TB 256GB-2TB+ Form Factor Integrated slot Requires HAT Power Consumption Very Low Moderate Durability (Write Cycles) 10,000-100,000 100,000-1,000,000+ Cost (256GB) $15-25 $35-50 Failure Rate Higher Lower Data Recovery Difficult Better options"},{"location":"concepts/gen-pi-images/#performance-impact-analysis","title":"Performance Impact Analysis","text":"<p>Application Loading: Chromium browser loads a full 38% faster with an SSD than with the microSD card on the Pi 4. The LibreOffice Calc spreadsheet app showed a 42% speed boost when moving from microSD to SSD.</p> <p>File Operations: The NVMe generates a jaw dropping 3,300% improvement over microSD for certain file system operations.</p> <p>System Responsiveness: The move to a NVMe SSD via a Pimoroni BASE made things noticeably snappier compared to USB 3.0 attached SSD.</p>"},{"location":"concepts/gen-pi-images/#use-case-recommendations","title":"Use Case Recommendations","text":"<p>Choose MicroSD When:</p> <ul> <li>Budget is extremely limited</li> <li>Projects involve minimal write operations</li> <li>Easy swappability between devices is required</li> <li>Power consumption must be minimized</li> <li>Simple setup is prioritized</li> </ul> <p>Choose NVMe When:</p> <ul> <li>Performance is critical for the application</li> <li>System will be under continuous heavy use</li> <li>Reliability is paramount for mission-critical deployments</li> <li>Working with large files or databases</li> <li>Running multiple concurrent applications</li> </ul>"},{"location":"concepts/gen-pi-images/#implementation-recommendations-for-educational-environments","title":"Implementation Recommendations for Educational Environments","text":""},{"location":"concepts/gen-pi-images/#for-basic-computing-labs","title":"For Basic Computing Labs","text":"<ul> <li>Start with high-quality A1/A2 rated microSD cards from reputable manufacturers</li> <li>Implement proper power supply standards across all units</li> <li>Establish regular backup procedures</li> <li>Consider gradual migration to NVMe for high-use systems</li> </ul>"},{"location":"concepts/gen-pi-images/#for-advanced-programming-and-development","title":"For Advanced Programming and Development","text":"<ul> <li>Invest in NVMe solutions for development workstations</li> <li>Use microSD for basic stations and NVMe for teacher/advanced student systems</li> <li>Implement network storage for project sharing and backup</li> </ul>"},{"location":"concepts/gen-pi-images/#for-long-term-deployments","title":"For Long-term Deployments","text":"<ul> <li>Budget for NVMe drives in systems expected to run continuously</li> <li>Plan for storage expansion as projects grow</li> <li>Consider hybrid approaches with NVMe for OS and network storage for data</li> </ul>"},{"location":"concepts/gen-pi-images/#conclusion","title":"Conclusion","text":"<p>The choice between storage options for Raspberry Pi in educational environments depends on balancing performance, reliability, cost, and ease of management. While microSD cards remain viable for basic applications, the Raspberry Pi 5's NVMe support represents a significant leap forward in performance and reliability.</p> <p>Getting an NVMe drive could be the key to a Pi setup that feels less like a hobbyist gadget and more like a minicomputer. For educational institutions planning long-term deployments or performance-critical applications, the investment in NVMe storage technology will provide substantial benefits in system responsiveness, reliability, and student experience.</p> <p>The imaging tools discussed\u2014both Raspberry Pi Imager and BalenaEtcher\u2014provide robust solutions for deploying customized systems at scale, with Raspberry Pi Imager offering the most integrated experience for Pi-specific deployments and BalenaEtcher providing broader format compatibility for diverse hardware environments.</p>"},{"location":"concepts/gen-pi-images/#references","title":"References","text":""},{"location":"concepts/gen-pi-images/#references_1","title":"References","text":"<ol> <li> <p>Raspberry Pi software \u2013 Raspberry Pi - 2025 - Raspberry Pi Foundation - Official download page for Raspberry Pi Imager with installation instructions and feature descriptions for the latest imaging utility</p> </li> <li> <p>balenaEtcher - Flash OS images to SD cards &amp; USB drives - 2025 - Balena - Official website for balenaEtcher cross-platform imaging tool with download links and comprehensive feature documentation</p> </li> <li> <p>Raspberry Pi OS downloads \u2013 Raspberry Pi - 2025 - Raspberry Pi Foundation - Official Raspberry Pi OS download page with various system images and installation guidance</p> </li> <li> <p>NVMe SSD boot with the Raspberry Pi 5 | Jeff Geerling - 2023 - Jeff Geerling - Comprehensive guide to setting up NVMe SSD boot on Raspberry Pi 5 with performance benchmarks and configuration steps</p> </li> <li> <p>Best microSD Cards for Raspberry Pi 2025 | Tom's Hardware - 2025 - Tom's Hardware - Detailed testing and comparison of microSD cards for Raspberry Pi with performance benchmarks and reliability analysis</p> </li> <li> <p>Official Raspberry Pi microSD Card Review - bret.dk - October 17, 2024 - Bret Samoyloff - In-depth review and benchmarking of official Raspberry Pi microSD cards with command queuing performance testing</p> </li> <li> <p>Does Your Raspberry Pi 5 Need an NVMe Drive? - November 15, 2024 - How-To Geek - Analysis of NVMe benefits for Raspberry Pi 5 with speed comparisons and use case recommendations</p> </li> <li> <p>Getting started - Raspberry Pi Documentation - 2025 - Raspberry Pi Foundation - Official documentation covering storage options, OS customization, and initial setup procedures for Raspberry Pi systems</p> </li> <li> <p>Raspberry Pi products/sd-cards - 2025 - Raspberry Pi Foundation - Official product page for Raspberry Pi microSD cards with specifications and availability information</p> </li> <li> <p>Raspberry Pi 4 With an SSD: Dramatic Speed Improvements, Higher Price | Tom's Hardware - June 8, 2020 - Tom's Hardware - Performance comparison testing showing speed improvements when using SSD storage versus microSD cards with real-world application benchmark</p> </li> <li> <p>Introducing rpi-image-gen: build highly customized Raspberry Pi software images</p> </li> </ol>"},{"location":"concepts/usb-port-administration/","title":"# USB Device Security in Educational Environments: The Thonny Challenge","text":""},{"location":"concepts/usb-port-administration/#introduction","title":"Introduction","text":"<p>In modern educational settings, programming environments like Thonny have become essential tools for teaching computer science and electronics. Thonny, a beginner-friendly Python IDE, is particularly popular for its simplicity and built-in support for microcontrollers like the Raspberry Pi Pico, Arduino boards, and other educational hardware. However, the very feature that makes these tools valuable in education\u2014their ability to interact with a wide variety of USB-connected devices\u2014also presents significant security challenges in classroom environments.</p> <p>The fundamental tension lies between educational functionality and institutional security. While students need access to program and debug microcontrollers, schools must protect their networks and systems from the myriad security threats that USB devices can introduce. This chapter explores these challenges and examines how different operating systems have evolved their USB security models to address these concerns.</p>"},{"location":"concepts/usb-port-administration/#the-educational-usb-challenge","title":"The Educational USB Challenge","text":""},{"location":"concepts/usb-port-administration/#why-usb-access-matters-in-programming-education","title":"Why USB Access Matters in Programming Education","text":"<p>Programming education has evolved beyond purely software-based learning. Modern curricula emphasize hands-on experience with physical computing, IoT devices, and embedded systems. Students working with platforms like:</p> <ul> <li>Raspberry Pi Pico and Pi Zero</li> <li>Arduino Uno, Nano, and ESP32 boards  </li> <li>micro:bit devices</li> <li>CircuitPython-compatible microcontrollers</li> <li>Custom educational robotics platforms</li> </ul> <p>These devices typically connect via USB and appear to the operating system as serial communication devices, mass storage devices, or composite devices that combine multiple interfaces. For Thonny to effectively program these devices, it requires:</p> <ul> <li>Serial port access for REPL (Read-Eval-Print Loop) interaction</li> <li>Mass storage access for direct file transfer to devices like CircuitPython boards</li> <li>Device enumeration capabilities to detect and identify connected hardware</li> <li>Low-level USB communication for firmware updates and debugging</li> </ul>"},{"location":"concepts/usb-port-administration/#the-classroom-reality","title":"The Classroom Reality","text":"<p>In a typical classroom scenario, 20-30 students might simultaneously connect various microcontrollers to school computers. Each device presents as a unique USB endpoint with specific driver requirements and communication protocols. The instructor needs assurance that:</p> <ul> <li>All devices will be recognized consistently across different classroom computers</li> <li>Students cannot accidentally or intentionally introduce malicious devices</li> <li>The school's network and data remain secure</li> <li>IT administrative overhead remains manageable</li> <li>Educational goals are not compromised by security restrictions</li> </ul>"},{"location":"concepts/usb-port-administration/#usb-security-threats-understanding-the-attack-surface","title":"USB Security Threats: Understanding the Attack Surface","text":""},{"location":"concepts/usb-port-administration/#the-fundamental-usb-security-problem","title":"The Fundamental USB Security Problem","text":"<p>USB was designed in the 1990s with convenience and plug-and-play functionality as primary goals, not security. The protocol inherently trusts connected devices and allows them to declare their own capabilities and identity. This trust-based model creates multiple attack vectors:</p>"},{"location":"concepts/usb-port-administration/#badusb-and-device-spoofing","title":"BadUSB and Device Spoofing","text":"<p>The BadUSB attack, first demonstrated in 2014, revealed that USB device firmware could be reprogrammed to impersonate different device types. A seemingly harmless USB storage device could:</p> <ul> <li>Declare itself as a keyboard and inject malicious keystrokes</li> <li>Present as a network adapter and redirect traffic</li> <li>Appear as multiple device types simultaneously</li> <li>Persist malicious code in device firmware, making it undetectable by traditional antivirus</li> </ul>"},{"location":"concepts/usb-port-administration/#malicious-mass-storage-devices","title":"Malicious Mass Storage Devices","text":"<p>USB storage devices can execute sophisticated attacks:</p> <ul> <li>Autorun exploitation: While largely mitigated in modern systems, legacy support and user behavior can still be exploited</li> <li>File system attacks: Malformed file systems can exploit OS parsing vulnerabilities</li> <li>Hidden partitions: Devices may contain multiple partitions, some invisible to standard file managers</li> <li>Firmware-based persistence: Malicious code embedded in device firmware can survive reformatting</li> </ul>"},{"location":"concepts/usb-port-administration/#supply-chain-attacks","title":"Supply Chain Attacks","text":"<p>In educational environments, USB devices often come from various sources:</p> <ul> <li>Donated equipment of unknown provenance  </li> <li>Student-owned devices with unknown modification history</li> <li>Bulk-purchased devices from suppliers with varying security standards</li> <li>Counterfeit devices that may contain malicious modifications</li> </ul>"},{"location":"concepts/usb-port-administration/#social-engineering-vectors","title":"Social Engineering Vectors","text":"<p>USB devices serve as powerful social engineering tools:</p> <ul> <li>\"Lost\" USB drives in parking lots (USB drops)</li> <li>Devices disguised as promotional materials</li> <li>Trojanized versions of legitimate educational hardware</li> <li>Student-to-student malware propagation via shared devices</li> </ul>"},{"location":"concepts/usb-port-administration/#operating-system-usb-security-strategies","title":"Operating System USB Security Strategies","text":""},{"location":"concepts/usb-port-administration/#chromeos-the-zero-trust-approach","title":"ChromeOS: The Zero-Trust Approach","text":"<p>ChromeOS represents the most restrictive approach to USB security, reflecting Google's security-first philosophy for educational environments.</p> <p>Core Security Principles:</p> <ul> <li>Default Deny: USB devices are blocked by default, with explicit allowlisting required</li> <li>Sandboxed Access: Applications run in isolated containers with limited USB access</li> <li>Centralized Management: Enterprise policies control USB device permissions across all managed devices</li> <li>Limited Attack Surface: The minimal ChromeOS attack surface reduces exploitation opportunities</li> </ul> <p>Implementation Details:</p> <p>ChromeOS uses a multi-layered approach:</p> <ul> <li>Hardware Verification: Only devices matching specific hardware signatures are permitted</li> <li>Policy Enforcement: Google Admin Console allows IT administrators to create granular USB policies</li> <li>Application Isolation: Even permitted applications like Thonny run within strict sandboxes</li> <li>Automatic Updates: Security patches are automatically applied, reducing vulnerability windows</li> </ul> <p>Educational Impact:</p> <p>While highly secure, ChromeOS's approach creates significant challenges for programming education:</p> <ul> <li>Limited support for serial communication protocols required by many microcontrollers</li> <li>Difficulty installing and managing device drivers for educational hardware</li> <li>Restricted access to low-level system functions needed for embedded programming</li> <li>Complex policy configuration required for each new device type</li> </ul> <p>Thonny-Specific Challenges:</p> <p>Thonny's functionality is severely limited on ChromeOS:</p> <ul> <li>Web-based versions lack full hardware access capabilities</li> <li>Serial port communication requires browser-based APIs with limited functionality</li> <li>File system access to microcontroller storage is restricted</li> <li>Debug and programming features may be unavailable</li> </ul>"},{"location":"concepts/usb-port-administration/#macos-balanced-security-through-user-consent","title":"macOS: Balanced Security Through User Consent","text":"<p>Apple's approach to USB security balances usability with protection through a consent-based model enhanced by system-level protections.</p> <p>Security Architecture:</p> <ul> <li>System Integrity Protection (SIP): Prevents unauthorized modification of system-level USB drivers</li> <li>Gatekeeper Integration: USB device drivers must be signed by Apple or explicitly approved</li> <li>User Consent Dialogs: Users must explicitly grant applications permission for USB access</li> <li>Entitlement System: Applications must declare their USB access requirements</li> </ul> <p>USB Access Control Mechanisms:</p> <p>macOS implements several layers of USB protection:</p> <ul> <li>IOKit Restrictions: Third-party applications require special entitlements for low-level hardware access</li> <li>Privacy Controls: USB access is treated as a privacy-sensitive operation requiring user consent</li> <li>Driver Signing: All USB drivers must be signed and notarized through Apple's developer program</li> <li>System Extension Framework: Modern USB drivers use Apple's secure system extension framework</li> </ul> <p>Educational Deployment Considerations:</p> <p>For classroom use, macOS requires careful configuration:</p> <ul> <li>IT administrators must pre-approve educational applications and their USB requirements</li> <li>Device driver installation may require administrative privileges</li> <li>Students may encounter repeated consent dialogs when connecting new devices</li> <li>Some educational hardware may require drivers that don't meet Apple's signing requirements</li> </ul> <p>Thonny Implementation:</p> <p>Thonny on macOS must navigate several security hurdles:</p> <ul> <li>Serial port access requires user permission through system dialogs</li> <li>Some microcontroller programmers need administrative privileges</li> <li>Driver installation for uncommon educational devices may be blocked</li> <li>Security updates can invalidate previously granted permissions</li> </ul>"},{"location":"concepts/usb-port-administration/#windows-evolution-from-openness-to-selective-trust","title":"Windows: Evolution from Openness to Selective Trust","text":"<p>Microsoft's USB security strategy has evolved significantly, moving from a historically permissive model to more sophisticated threat mitigation.</p> <p>Historical Context:</p> <p>Windows traditionally prioritized device compatibility and user convenience, leading to:</p> <ul> <li>Automatic driver installation for most USB devices</li> <li>Broad application access to USB subsystems</li> <li>Limited restrictions on device enumeration and communication</li> <li>User-level access to potentially dangerous device functions</li> </ul> <p>Modern Security Measures:</p> <p>Recent Windows versions incorporate multiple USB security enhancements:</p> <ul> <li>Windows Defender Device Guard: Prevents unauthorized device drivers from loading</li> <li>Driver Signature Enforcement: Requires digital signatures for kernel-mode drivers</li> <li>User Account Control (UAC): Restricts administrative device access</li> <li>Windows Security: Monitors USB device behavior for suspicious activity</li> </ul> <p>Enterprise Security Features:</p> <p>Windows Enterprise editions provide additional USB controls:</p> <ul> <li>Group Policy USB Restrictions: IT administrators can block specific device classes</li> <li>BitLocker Integration: USB encryption requirements for removable storage</li> <li>Device Installation Restrictions: Centralized control over which devices can be installed</li> <li>Audit Logging: Comprehensive logs of USB device connections and access attempts</li> </ul> <p>Educational Environment Challenges:</p> <p>Windows in educational settings faces several USB-related challenges:</p> <ul> <li>Legacy Compatibility: Older educational software may require deprecated USB access methods</li> <li>Driver Management: Diverse educational hardware creates driver installation complexities  </li> <li>Permission Escalation: Some educational activities require elevated privileges</li> <li>Update Management: Security updates may break compatibility with educational devices</li> </ul> <p>Thonny on Windows:</p> <p>Windows provides the most compatible environment for Thonny, but with caveats:</p> <ul> <li>Serial port access generally works without special permissions</li> <li>Driver installation may require administrator rights</li> <li>Windows Defender may flag microcontroller programmers as potentially unwanted programs</li> <li>Enterprise security policies can interfere with educational USB device access</li> </ul>"},{"location":"concepts/usb-port-administration/#linux-flexibility-with-granular-control","title":"Linux: Flexibility with Granular Control","text":"<p>Linux distributions offer the most flexible approach to USB security, providing granular control mechanisms that can be tailored to specific educational needs.</p> <p>Security Framework Components:</p> <ul> <li>udev Rules: Fine-grained control over device permissions and behavior</li> <li>SELinux/AppArmor: Mandatory access controls for USB device interactions  </li> <li>systemd: Modern service management with USB device integration</li> <li>Kernel Security Modules: Pluggable security frameworks for custom policies</li> </ul> <p>Permission and Access Control:</p> <p>Linux USB security relies on several interconnected systems:</p> <ul> <li>Device Node Permissions: Traditional Unix file permissions control device access</li> <li>Group-Based Access: Users must be members of specific groups (e.g., dialout) for serial access</li> <li>PolicyKit: User session-based authorization for device access</li> <li>Container Isolation: Containerized applications can have restricted USB access</li> </ul> <p>Educational Deployment Advantages:</p> <p>Linux offers several advantages for educational USB device management:</p> <ul> <li>Open Source Drivers: Most educational hardware has open-source driver support</li> <li>Customizable Security Policies: IT administrators can create tailored security configurations</li> <li>Transparent Operation: Students can learn about the underlying system behavior</li> <li>Cost Effectiveness: No licensing costs for educational deployments</li> </ul> <p>Distribution-Specific Considerations:</p> <p>Different Linux distributions handle USB security differently:</p> <ul> <li>Ubuntu/Debian: User-friendly defaults with group-based permissions</li> <li>Red Hat Enterprise Linux: Enterprise-focused with more restrictive defaults</li> <li>Arch Linux: Minimal configuration requiring manual security setup</li> <li>Educational Distributions: Some distributions are specifically designed for classroom use</li> </ul> <p>Thonny on Linux:</p> <p>Linux generally provides the best environment for Thonny and educational USB devices:</p> <ul> <li>Comprehensive serial port support without special permissions (for users in dialout group)</li> <li>Extensive microcontroller and programmer support through open-source drivers</li> <li>Ability to customize USB permissions for specific educational needs</li> <li>Transparent debugging and troubleshooting capabilities</li> </ul>"},{"location":"concepts/usb-port-administration/#implementation-challenges-in-multi-platform-classrooms","title":"Implementation Challenges in Multi-Platform Classrooms","text":""},{"location":"concepts/usb-port-administration/#the-heterogeneous-environment-problem","title":"The Heterogeneous Environment Problem","text":"<p>Modern educational institutions often deploy mixed computing environments, with ChromeOS, Windows, macOS, and Linux systems coexisting within the same classroom or institution. This heterogeneity creates significant challenges:</p> <p>Consistency Issues:</p> <ul> <li>USB devices that work perfectly on one platform may be completely inaccessible on another</li> <li>Student experience varies dramatically depending on which computer they use</li> <li>Instructors must maintain expertise across multiple platform-specific solutions</li> <li>Technical support complexity multiplies with each additional platform</li> </ul> <p>Policy Synchronization:</p> <p>Maintaining consistent security policies across platforms requires:</p> <ul> <li>Platform-specific configuration for identical security requirements</li> <li>Different technical implementations of the same educational objectives</li> <li>Varied user experience for identical tasks</li> <li>Complex training requirements for IT staff and educators</li> </ul>"},{"location":"concepts/usb-port-administration/#device-driver-management","title":"Device Driver Management","text":"<p>Educational USB devices often require specialized drivers that present deployment challenges:</p> <p>Driver Signing and Certification:</p> <ul> <li>macOS requires Apple developer program membership for driver signing</li> <li>Windows driver signing certificates are expensive and complex to obtain</li> <li>ChromeOS allows only pre-approved drivers or web-based alternatives</li> <li>Linux driver compilation may be needed for newer hardware</li> </ul> <p>Update and Maintenance:</p> <ul> <li>OS updates can break compatibility with educational device drivers</li> <li>Driver updates may introduce security vulnerabilities or compatibility issues</li> <li>Legacy educational hardware may lack modern driver support</li> <li>Automated update systems can inadvertently disable educational functionality</li> </ul>"},{"location":"concepts/usb-port-administration/#security-best-practices-for-educational-environments","title":"Security Best Practices for Educational Environments","text":""},{"location":"concepts/usb-port-administration/#risk-assessment-and-mitigation","title":"Risk Assessment and Mitigation","text":"<p>Educational institutions should implement comprehensive USB security strategies:</p> <p>Asset Inventory:</p> <ul> <li>Catalog all educational USB devices and their security implications</li> <li>Identify devices that require elevated privileges or special driver support</li> <li>Assess the security posture of device manufacturers and suppliers</li> <li>Document approved devices and their specific educational applications</li> </ul> <p>Threat Modeling:</p> <p>Specific threat considerations for educational environments include:</p> <ul> <li>Student-introduced malicious devices (intentional or accidental)</li> <li>Compromised educational hardware from untrusted suppliers</li> <li>Social engineering attacks targeting students and faculty</li> <li>Data exfiltration via USB storage devices</li> <li>Network compromise through USB-connected devices with network capabilities</li> </ul>"},{"location":"concepts/usb-port-administration/#technical-safeguards","title":"Technical Safeguards","text":"<p>Network Segmentation:</p> <ul> <li>Isolate classroom networks from administrative and sensitive systems</li> <li>Implement network access controls for USB-connected devices with networking capabilities</li> <li>Monitor network traffic from classroom systems for suspicious activity</li> <li>Use VLANs to separate different types of educational activities</li> </ul> <p>Endpoint Protection:</p> <ul> <li>Deploy endpoint detection and response (EDR) solutions on classroom systems</li> <li>Implement application allowlisting to prevent execution of unauthorized programs</li> <li>Use behavioral analysis to detect USB-based attacks</li> <li>Maintain updated antivirus signatures for USB-borne malware</li> </ul> <p>Access Controls:</p> <ul> <li>Implement role-based access controls for USB device permissions</li> <li>Use group policies to restrict USB access to educational applications only</li> <li>Deploy privileged access management solutions for administrative functions</li> <li>Monitor and log all USB device connections and file transfers</li> </ul>"},{"location":"concepts/usb-port-administration/#administrative-controls","title":"Administrative Controls","text":"<p>Policy Development:</p> <p>Educational institutions should establish comprehensive USB security policies:</p> <ul> <li>Clear guidelines for approved educational devices and suppliers</li> <li>Procedures for evaluating and approving new educational hardware</li> <li>Incident response procedures for suspected USB security breaches</li> <li>Regular security awareness training for students and faculty</li> </ul> <p>Vendor Management:</p> <ul> <li>Establish security requirements for educational hardware vendors</li> <li>Require security documentation and testing results for new devices</li> <li>Implement supply chain security assessments for bulk hardware purchases</li> <li>Maintain relationships with trusted educational technology suppliers</li> </ul>"},{"location":"concepts/usb-port-administration/#future-considerations-and-emerging-technologies","title":"Future Considerations and Emerging Technologies","text":""},{"location":"concepts/usb-port-administration/#usb-c-and-thunderbolt-security-implications","title":"USB-C and Thunderbolt Security Implications","text":"<p>The transition to USB-C and Thunderbolt interfaces introduces new security considerations:</p> <p>Increased Attack Surface:</p> <ul> <li>USB-C's ability to carry power, data, and video signals creates new attack vectors</li> <li>Thunderbolt's PCIe tunneling provides direct memory access capabilities</li> <li>Power delivery attacks can potentially damage connected devices</li> <li>Multi-protocol support complicates security policy enforcement</li> </ul> <p>Educational Benefits and Risks:</p> <p>While USB-C enables more sophisticated educational projects, it also requires enhanced security measures:</p> <ul> <li>More powerful microcontrollers and single-board computers with enhanced capabilities</li> <li>Direct connection to external GPUs and high-performance peripherals for advanced projects</li> <li>Simplified connectivity reducing cable management in classrooms</li> <li>Increased security complexity requiring more sophisticated IT management</li> </ul>"},{"location":"concepts/usb-port-administration/#web-based-development-environments","title":"Web-Based Development Environments","text":"<p>The emergence of web-based development environments like browser-based versions of Thonny represents a potential solution to USB security challenges:</p> <p>Security Advantages:</p> <ul> <li>Reduced attack surface through browser sandboxing</li> <li>Centralized security policy enforcement through web application controls</li> <li>Simplified device management through web-based APIs</li> <li>Consistent cross-platform behavior regardless of underlying operating system</li> </ul> <p>Educational Limitations:</p> <ul> <li>Limited hardware access capabilities compared to native applications</li> <li>Dependence on internet connectivity for cloud-based development environments</li> <li>Reduced debugging and low-level hardware access capabilities</li> <li>Potential privacy concerns with cloud-based educational data</li> </ul>"},{"location":"concepts/usb-port-administration/#hardware-security-evolution","title":"Hardware Security Evolution","text":"<p>Educational hardware manufacturers are beginning to incorporate enhanced security features:</p> <p>Secure Boot and Attestation:</p> <ul> <li>Microcontrollers with secure boot capabilities to prevent firmware tampering</li> <li>Hardware security modules (HSMs) for cryptographic operations in educational projects</li> <li>Device attestation capabilities to verify hardware authenticity</li> <li>Tamper-evident packaging and supply chain security measures</li> </ul> <p>Zero Trust Hardware:</p> <ul> <li>Educational devices designed with zero-trust security principles</li> <li>Cryptographic device identity and authentication</li> <li>Encrypted communication protocols for all device interactions</li> <li>Secure firmware update mechanisms resistant to supply chain attacks</li> </ul>"},{"location":"concepts/usb-port-administration/#conclusion","title":"Conclusion","text":"<p>The challenge of balancing USB device security with educational functionality in tools like Thonny reflects broader tensions in cybersecurity between usability and protection. As educational technology continues to evolve, institutions must navigate increasingly complex security landscapes while preserving the hands-on learning experiences that make programming education effective.</p> <p>The divergent approaches taken by different operating system vendors\u2014from ChromeOS's restrictive zero-trust model to Linux's flexible but complex permission systems\u2014demonstrate that there is no universal solution to USB security in educational environments. Instead, institutions must carefully evaluate their specific needs, risk tolerance, and technical capabilities to develop comprehensive USB security strategies.</p> <p>Looking forward, emerging technologies like web-based development environments and hardware security enhancements may provide new approaches to this challenge. However, the fundamental tension between security and educational functionality will likely persist, requiring ongoing attention from educators, IT professionals, and security practitioners.</p> <p>The key to success lies in understanding that USB security in educational environments is not merely a technical challenge but a multidisciplinary problem requiring collaboration between cybersecurity professionals, educators, and technology vendors. Only through such collaboration can we develop solutions that protect institutional assets while preserving the innovative, hands-on learning experiences that define modern computer science education.</p>"},{"location":"concepts/usb-power-draw/","title":"USB Power Management Challenges with Microcontrollers","text":"<p>Whenever we connect a USB device to a computer, we must carefully consider how much power the USB device will draw and if the computer's port has sufficient power to supply the USB devices.</p>"},{"location":"concepts/usb-power-draw/#introduction","title":"Introduction","text":"<p>When working with microcontrollers like the Raspberry Pi Pico, one of the most common yet overlooked issues is USB power management. While USB connections appear simple from a user's perspective, the underlying power delivery system involves complex negotiations between devices and hosts, strict current limitations, and sophisticated protection mechanisms. Understanding these challenges is crucial for anyone developing embedded systems or working with microcontroller projects.</p> <p>The Universal Serial Bus (USB) standard was originally designed for simple peripheral devices with modest power requirements. However, as microcontrollers and their associated peripherals have become more capable and power-hungry, the mismatch between available USB power and device requirements has become a significant engineering challenge.</p>"},{"location":"concepts/usb-power-draw/#understanding-usb-power-specifications","title":"Understanding USB Power Specifications","text":""},{"location":"concepts/usb-power-draw/#usb-20-power-limits","title":"USB 2.0 Power Limits","text":"<p>The original USB 2.0 specification defines strict power delivery limits that remain relevant today:</p> <p>Low-power devices can draw up to 100mA (0.5W at 5V) without any special configuration. These devices can begin operating immediately upon connection without requesting additional power from the host.</p> <p>High-power devices can draw up to 500mA (2.5W at 5V) but must first enumerate with the host system and explicitly request this higher current through the USB protocol. The host can deny this request if insufficient power is available.</p>"},{"location":"concepts/usb-power-draw/#usb-30-and-31-enhancements","title":"USB 3.0 and 3.1 Enhancements","text":"<p>USB 3.0 introduced modest improvements to power delivery, increasing the maximum current to 900mA (4.5W at 5V) for SuperSpeed devices. However, this increase still falls short of many modern microcontroller applications, especially those involving sensors, displays, or wireless communication modules.</p> <p>USB 3.1 maintained the same power limits but introduced more sophisticated power management protocols, allowing for better coordination between devices and hosts regarding power allocation.</p>"},{"location":"concepts/usb-power-draw/#the-current-limitation-problem","title":"The Current Limitation Problem","text":"<p>The fundamental issue stems from the fact that many microcontroller projects require more power than USB can safely provide. A Raspberry Pi Pico itself consumes relatively little power (typically 20-30mA during normal operation), but when combined with peripherals such as:</p> <ul> <li>LED strips or matrices</li> <li>Servo motors</li> <li>WiFi modules</li> <li>Bluetooth transceivers</li> <li>Multiple sensors</li> <li>External displays</li> </ul> <p>The total current draw can easily exceed the 500mA USB 2.0 limit or even the 900mA USB 3.0 limit. When devices attempt to draw more current than the USB specification allows, several problematic scenarios can occur.</p>"},{"location":"concepts/usb-power-draw/#power-draw-consequences-and-system-responses","title":"Power Draw Consequences and System Responses","text":""},{"location":"concepts/usb-power-draw/#immediate-effects-of-overcurrent-conditions","title":"Immediate Effects of Overcurrent Conditions","text":"<p>When a microcontroller system draws excessive current from a USB port, the host system typically responds in one of several ways:</p> <p>Voltage drooping occurs when the USB port cannot maintain the required 5V under high current load. This voltage sag can cause erratic microcontroller behavior, including random resets, communication failures, and unreliable sensor readings.</p> <p>Port shutdown is the most common protective response. Modern USB hosts include overcurrent protection that automatically disables the USB port when current draw exceeds safe limits. This appears as sudden device disconnection and requires physical unplugging and reconnecting to restore functionality.</p> <p>System instability can affect not just the offending device but other USB devices on the same hub or controller. In extreme cases, excessive current draw from one device can cause voltage fluctuations that disrupt other connected peripherals.</p>"},{"location":"concepts/usb-power-draw/#raspberry-pi-pico-specific-considerations","title":"Raspberry Pi Pico Specific Considerations","text":"<p>The Raspberry Pi Pico presents unique power management challenges due to its dual-core ARM Cortex-M0+ processor and extensive I/O capabilities. While the base microcontroller is relatively power-efficient, real-world applications often push beyond USB power limitations:</p> <p>GPIO loading becomes significant when driving multiple outputs simultaneously. Each GPIO pin can source or sink up to 12mA, and projects using many pins can quickly accumulate substantial current draw.</p> <p>Clock frequency impact affects power consumption dramatically. Running the Pico at its maximum 133MHz clock speed increases current draw compared to lower frequencies, though the relationship is not linear due to dynamic power scaling.</p> <p>Sleep mode limitations mean that many educational projects run continuously at full power rather than implementing proper power management, exacerbating USB power constraints.</p>"},{"location":"concepts/usb-power-draw/#operating-system-monitoring-and-management","title":"Operating System Monitoring and Management","text":""},{"location":"concepts/usb-power-draw/#macos-power-monitoring","title":"macOS Power Monitoring","text":"<p>macOS provides several mechanisms for monitoring USB power consumption, though they require different levels of technical expertise to access.</p> <p>System Information offers the most accessible method. Users can access this through \"About This Mac\" &gt; \"System Report\" &gt; \"USB\" to view connected devices and their power consumption. Each device listing includes \"Current Available\" and \"Current Required\" fields that indicate power allocation.</p> <p>Terminal utilities provide more detailed information. The <code>system_profiler SPUSBDataType</code> command generates comprehensive USB device reports including power consumption data. The <code>ioreg</code> command with appropriate flags can show real-time power draw information.</p> <p>Console application logs USB power events, including overcurrent conditions and power allocation changes. Filtering for \"USB\" or \"power\" terms reveals relevant system messages about power management decisions.</p> <p>Third-party applications like USB Prober (part of Apple's Hardware IO Tools) provide real-time monitoring capabilities and detailed power analysis for connected USB devices.</p>"},{"location":"concepts/usb-power-draw/#windows-usb-power-analysis","title":"Windows USB Power Analysis","text":"<p>Windows offers multiple approaches to USB power monitoring, ranging from built-in utilities to specialized diagnostic tools.</p> <p>Device Manager provides basic power information through device properties. Right-clicking on USB devices and selecting \"Properties\" &gt; \"Power\" tab shows current consumption and available current for each device.</p> <p>PowerShell commands enable detailed USB power analysis. The <code>Get-WmiObject</code> cmdlet with appropriate classes can retrieve USB power information programmatically. Commands like <code>Get-WmiObject -Class Win32_USBController</code> provide system-level USB power data.</p> <p>Windows Performance Toolkit includes USB-specific tracing capabilities that can monitor power events in real-time. The Windows Driver Kit provides additional utilities for USB analysis.</p> <p>USBView utility from Microsoft's Windows SDK offers comprehensive USB device enumeration with detailed power information, including current requests and allocations.</p> <p>Third-party solutions such as USBDeview by NirSoft provide user-friendly interfaces for monitoring USB power consumption and can log power events over time.</p>"},{"location":"concepts/usb-power-draw/#linux-usb-power-monitoring","title":"Linux USB Power Monitoring","text":"<p>Linux provides the most comprehensive and accessible USB power monitoring capabilities through its filesystem-based approach to hardware information.</p> <p>The /sys/bus/usb filesystem contains detailed information about all connected USB devices. Files like <code>/sys/bus/usb/devices/*/power/runtime_*</code> provide real-time power management information for each device.</p> <p>lsusb command with verbose flags (<code>lsusb -v</code>) displays comprehensive USB device information including power consumption. The output includes \"MaxPower\" fields indicating the device's power requirements.</p> <p>usbmon framework enables real-time USB traffic monitoring, including power management communications between devices and hosts. This kernel facility provides detailed logs of USB power negotiations.</p> <p>sysfs power attributes in <code>/sys/bus/usb/devices/*/power/</code> directories contain files like <code>autosuspend</code>, <code>control</code>, and <code>runtime_usage</code> that show current power management states and allow manual control.</p> <p>dmesg command reveals kernel messages related to USB power events, including overcurrent conditions and power allocation failures. Filtering with <code>dmesg | grep -i usb</code> shows relevant power-related messages.</p> <p>Custom monitoring scripts can be easily created to continuously monitor USB power consumption by reading from sysfs files and logging changes over time.</p>"},{"location":"concepts/usb-power-draw/#chromeos-usb-power-monitoring","title":"ChromeOS USB Power Monitoring","text":"<p>ChromeOS, being based on Linux, shares many monitoring capabilities with traditional Linux distributions, though access is more restricted due to the platform's security model.</p> <p>Developer Mode enables access to a Linux shell (crosh) where traditional USB monitoring commands become available. Users can access <code>/sys/bus/usb/</code> filesystem information similar to standard Linux distributions.</p> <p>Chrome browser internals provide some USB information through <code>chrome://device-log/</code> and <code>chrome://usb-internals/</code> pages, though these are primarily intended for web USB API debugging rather than power monitoring.</p> <p>System diagnostics built into ChromeOS can identify USB power issues, though they present information in a user-friendly format rather than detailed technical data.</p> <p>Linux container support (Crostini) allows installation of traditional Linux USB monitoring tools within the contained environment, providing access to comprehensive power analysis capabilities.</p>"},{"location":"concepts/usb-power-draw/#hardware-protection-mechanisms","title":"Hardware Protection Mechanisms","text":""},{"location":"concepts/usb-power-draw/#host-side-protection","title":"Host-Side Protection","text":"<p>Modern computer systems implement multiple layers of protection against USB overcurrent conditions:</p> <p>Polyfuse (PTC) protection is the most common primary protection mechanism. These resettable fuses automatically limit current flow when temperatures rise due to excessive current draw. Unlike traditional fuses, polyfuses reset automatically when the overcurrent condition is removed and the device cools down.</p> <p>Electronic current limiting uses dedicated integrated circuits to monitor and control current flow to USB ports. These systems can respond more quickly than thermal protection and often provide more precise current limiting.</p> <p>Software-controlled power switching allows the operating system to selectively enable or disable power to individual USB ports. This capability enables sophisticated power management policies and allows recovery from overcurrent conditions without physical intervention.</p> <p>Hub-level protection in USB hubs provides additional layers of protection, with each downstream port having independent overcurrent protection. This prevents problems on one port from affecting other connected devices.</p>"},{"location":"concepts/usb-power-draw/#device-side-considerations","title":"Device-Side Considerations","text":"<p>Microcontroller-based devices can implement their own power management strategies to work within USB limitations:</p> <p>Inrush current limiting addresses the startup current spike that occurs when microcontrollers and their associated capacitors begin charging. Without proper limiting, this initial current surge can trigger overcurrent protection even if steady-state consumption is within limits.</p> <p>Dynamic power scaling allows microcontrollers to adjust their power consumption based on available USB current. This might involve reducing clock speeds, disabling unused peripherals, or implementing more aggressive sleep modes.</p> <p>External power detection enables devices to automatically switch between USB power and external power supplies when available, providing the best user experience while staying within USB limitations.</p> <p>Load switches and power multiplexers can be used to selectively enable high-power peripherals only when external power is available, allowing basic functionality on USB power alone.</p>"},{"location":"concepts/usb-power-draw/#modern-usb-power-standards","title":"Modern USB Power Standards","text":""},{"location":"concepts/usb-power-draw/#usb-power-delivery-usb-pd","title":"USB Power Delivery (USB PD)","text":"<p>The USB Power Delivery specification represents the most significant advancement in USB power management, enabling power levels far beyond traditional USB limitations.</p> <p>USB PD 2.0 introduced variable voltage and current capabilities, allowing devices to negotiate for up to 100W of power at voltages ranging from 5V to 20V. This specification uses USB-C connectors exclusively and requires sophisticated communication protocols between devices and hosts.</p> <p>USB PD 3.0 expanded capabilities further, introducing Programmable Power Supply (PPS) modes that allow fine-grained voltage and current control. This version can deliver up to 240W of power, making it suitable for powering laptops and other high-power devices.</p> <p>PD communication occurs over the USB-C Configuration Channel (CC) lines using a dedicated protocol. Devices must actively negotiate power requirements, and hosts can dynamically adjust power allocation based on system capabilities and other connected devices.</p>"},{"location":"concepts/usb-power-draw/#usb-c-and-alternative-modes","title":"USB-C and Alternative Modes","text":"<p>USB-C represents more than just a new connector; it embodies a fundamental shift in USB power delivery philosophy:</p> <p>Bidirectional power flow allows USB-C devices to act as power sources or sinks, enabling scenarios like powering a laptop from a tablet or using a phone as a power bank for other devices.</p> <p>Alternative modes like Thunderbolt 3/4 and DisplayPort enable even higher power delivery for specialized applications, with some implementations supporting over 100W of power delivery.</p> <p>Cable capabilities vary significantly between USB-C cables, with some supporting only basic USB 2.0 power levels while others enable full USB PD capabilities. This variability can create user confusion and compatibility issues.</p>"},{"location":"concepts/usb-power-draw/#usb4-power-enhancements","title":"USB4 Power Enhancements","text":"<p>The newest USB4 specification continues the evolution of USB power management:</p> <p>Enhanced power delivery builds upon USB PD 3.0 capabilities while improving efficiency and reducing negotiation latency.</p> <p>Better power allocation algorithms allow USB4 hosts to make more intelligent decisions about power distribution among multiple connected devices.</p> <p>Backward compatibility ensures that older USB devices continue to work with USB4 systems, though they remain limited to their original power specifications.</p>"},{"location":"concepts/usb-power-draw/#practical-solutions-and-best-practices","title":"Practical Solutions and Best Practices","text":""},{"location":"concepts/usb-power-draw/#design-time-considerations","title":"Design-Time Considerations","text":"<p>When developing microcontroller projects intended for USB power, several strategies can help ensure reliable operation:</p> <p>Power budgeting should be performed early in the design process. Calculate the maximum current draw of all components under worst-case conditions, including startup transients and peak operating modes.</p> <p>Peripheral prioritization allows systems to enable high-power features only when external power is available. Essential functions should be designed to operate within USB power limits.</p> <p>Voltage regulation efficiency significantly impacts overall power consumption. Using high-efficiency switching regulators instead of linear regulators can reduce current draw from the USB port.</p> <p>Power sequencing controls the order in which system components are powered up, spreading the current demand over time and reducing peak current requirements.</p>"},{"location":"concepts/usb-power-draw/#runtime-power-management","title":"Runtime Power Management","text":"<p>Microcontroller software can actively manage power consumption to stay within USB limitations:</p> <p>Dynamic frequency scaling reduces processor power consumption during low-activity periods. The Raspberry Pi Pico supports variable clock frequencies that can significantly impact power draw.</p> <p>Peripheral duty cycling turns off non-essential components when they're not needed. This might include periodically disabling WiFi radios, reducing LED brightness, or putting sensors into sleep modes.</p> <p>Load detection algorithms can monitor system voltage to detect when USB power limitations are being approached, allowing software to reduce power consumption before overcurrent protection activates.</p> <p>Graceful degradation provides reduced functionality when power is limited rather than complete system failure. This might mean reducing display brightness, decreasing sampling rates, or disabling non-critical features.</p>"},{"location":"concepts/usb-power-draw/#external-power-solutions","title":"External Power Solutions","text":"<p>For applications that exceed USB power capabilities, several external power options provide solutions:</p> <p>USB PD power banks can provide higher power levels while maintaining USB connectivity for data communication. These solutions require USB-C connections and compatible power management circuits.</p> <p>Wall adapters offer the highest power levels but reduce portability. Many educational applications benefit from dual-power designs that can operate on either USB or external power.</p> <p>Battery systems provide portable high-power operation but add complexity for charging and power management. Lithium-ion batteries require sophisticated charging circuits and safety protections.</p> <p>Power injection techniques can combine USB data connectivity with external power delivery, though these approaches require careful design to avoid ground loops and signal integrity issues.</p>"},{"location":"concepts/usb-power-draw/#troubleshooting-usb-power-issues","title":"Troubleshooting USB Power Issues","text":""},{"location":"concepts/usb-power-draw/#identifying-power-problems","title":"Identifying Power Problems","text":"<p>USB power issues often manifest in subtle ways that can be difficult to diagnose:</p> <p>Intermittent operation is one of the most common symptoms, where devices work sometimes but fail unpredictably. This often indicates marginal power supply conditions where small changes in load or environment trigger failures.</p> <p>Reset loops occur when devices repeatedly restart due to voltage drops during high-current operations. This creates a distinctive pattern of connect/disconnect cycles visible in system logs.</p> <p>Communication errors can result from voltage drooping that affects USB signal integrity without completely shutting down the device. These errors might appear as failed transfers or protocol violations.</p> <p>Temperature-related failures suggest thermal protection activation, either in polyfuses or other protection circuits. Devices may work initially but fail after warming up.</p>"},{"location":"concepts/usb-power-draw/#diagnostic-techniques","title":"Diagnostic Techniques","text":"<p>Several approaches can help identify and resolve USB power issues:</p> <p>Voltage monitoring at the device end can reveal power supply problems not visible at the host. Simple multimeter measurements during operation can identify voltage drooping issues.</p> <p>Current measurement using inline current meters or specialized USB current monitors provides direct feedback about power consumption patterns.</p> <p>Oscilloscope analysis can reveal current spikes and voltage transients that might not be visible with simpler measurement tools. This is particularly useful for identifying startup current issues.</p> <p>Temperature monitoring of protection components can indicate thermal limiting conditions that might not be immediately obvious.</p>"},{"location":"concepts/usb-power-draw/#future-considerations","title":"Future Considerations","text":"<p>The evolution of USB power management continues with several trends that will impact microcontroller applications:</p> <p>Higher power standards continue to evolve, with USB PD capabilities expanding to support even more demanding applications. Future revisions may support power levels exceeding 240W.</p> <p>Improved efficiency requirements are driving development of more efficient power conversion circuits, allowing more useful power to be delivered within existing current limitations.</p> <p>Smart power management using artificial intelligence and machine learning algorithms may enable more sophisticated power allocation decisions in future USB controllers.</p> <p>Wireless power integration may eventually supplement or replace wired USB power delivery for some applications, though this remains limited to lower power levels.</p>"},{"location":"concepts/usb-power-draw/#conclusion","title":"Conclusion","text":"<p>USB power management represents a critical consideration for any microcontroller project, particularly in educational environments where students may not initially understand the limitations and implications of power delivery systems. The Raspberry Pi Pico, while power-efficient in its basic configuration, can easily exceed USB power limitations when combined with typical project peripherals.</p> <p>Understanding the monitoring capabilities of different operating systems enables developers and educators to identify power-related issues quickly and accurately. The sophisticated protection mechanisms built into modern USB systems generally prevent damage but can cause frustrating operational issues if not properly understood.</p> <p>The evolution toward USB-C and USB Power Delivery standards provides a path toward higher-power microcontroller applications, though these newer standards require more complex hardware and software implementations. For educational applications, the key is finding the right balance between project capability and power system complexity.</p> <p>Success in USB-powered microcontroller projects requires careful attention to power budgeting, appropriate use of monitoring tools, and implementation of robust power management strategies in both hardware and software. By understanding these challenges and applying appropriate solutions, developers can create reliable systems that work within the constraints of USB power delivery while still achieving their functional objectives.</p>"},{"location":"linux/","title":"Rasberry Pi and Linux","text":""},{"location":"macos/","title":"MacOS in a STEM Classroom with Physical Computing Tools","text":""},{"location":"macos/usb-ports/","title":"USB Port Administration on MacOS","text":""},{"location":"macos/usb-ports/#mac-system-profiler","title":"Mac System Profiler","text":"<p>On MacOS we can use the <code>system_profiler</code> command:</p> <pre><code>system_profiler SPUSBDataType\n\nUSB:\n\n    USB 3.1 Bus:\n\n      Host Controller Driver: AppleT8112USBXHCI\n\n    USB 3.1 Bus:\n\n      Host Controller Driver: AppleT8112USBXHCI\n\n        Board in FS mode:\n\n          Product ID: 0x0005\n          Vendor ID: 0x2e8a\n          Version: 1.00\n          Serial Number: e66141040396962a\n          Speed: Up to 12 Mb/s\n          Manufacturer: MicroPython\n          Location ID: 0x00100000 / 1\n          Current Available (mA): 500\n          Current Required (mA): 250\n          Extra Operating Current (mA): 0\n</code></pre> <p>Note that you can see both the Product ID, Vendor ID Manufacturer (MicroPython) and the mode (File System mode) that the device was connected.  The current available and current required are also listed, although these numbers might be somewhat conservative.  They are used for the estimation of current only.</p>"},{"location":"windows/thonny-admin/","title":"Installing Thonny","text":"<p>Here are some of the most common problems installing Thonny on Windows computers.</p>"},{"location":"windows/thonny-admin/#missing-or-corrupted-installer","title":"Missing or Corrupted Installer","text":"<p>Description: Sometimes the Thonny installer file is not completely downloaded, becomes corrupted, or is flagged incorrectly by antivirus software.</p> <p>Solution:</p> <ul> <li>Re-download the installer directly from the official website: https://thonny.org</li> <li>Make sure the file is not blocked by antivirus software or Windows Defender.</li> <li>Right-click the installer, select \u201cProperties,\u201d and check for a message at the bottom saying \u201cThis file came from another computer\u2026\u201d and click \u201cUnblock\u201d if present.</li> <li>Run the installer as an administrator.</li> </ul>"},{"location":"windows/thonny-admin/#insufficient-permissions","title":"Insufficient Permissions","text":"<p>Description: Thonny may fail to install or run properly if the user account lacks administrative privileges, especially when trying to write to system directories.</p> <p>Solution:</p> <ul> <li>Right-click the installer and select \"Run as administrator.\"</li> <li>If you're in a managed environment (e.g., school or work PC), contact your IT admin for permissions or install in your local user directory.</li> </ul>"},{"location":"windows/thonny-admin/#thonny-not-launching-after-installation","title":"Thonny Not Launching After Installation","text":"<p>Description: After a successful installation, Thonny may not start due to misconfigured environments or missing dependencies.</p> <p>Solution:</p> <ul> <li>Try launching Thonny from the command line (<code>cmd</code>) with:</li> </ul> <p><pre><code>\"C:\\Program Files (x86)\\Thonny\\thonny.exe\"\n</code></pre> * If it doesn't open, reinstall Thonny with the \"Just for me\" option instead of \"All users\". * Check your antivirus logs to see if it's blocking Thonny.</p>"},{"location":"windows/thonny-admin/#python-not-found-or-wrong-version","title":"Python Not Found or Wrong Version","text":"<p>Description: Although Thonny includes its own Python interpreter, some installations can conflict with system-installed Python, especially if PATH is misconfigured.</p> <p>Solution:</p> <ul> <li>Use the bundled version of Thonny that includes Python (recommended).</li> <li>Avoid modifying the PATH manually unless you're managing multiple Python versions.</li> <li>Check the <code>Tools \u2192 Options \u2192 Interpreter</code> setting in Thonny to verify which interpreter is being used.</li> </ul>"},{"location":"windows/thonny-admin/#serial-port-not-found-for-micropythonpyboard","title":"Serial Port Not Found (for MicroPython/PyBoard)","text":"<p>Description: When trying to use Thonny with a microcontroller like Raspberry Pi Pico or ESP32, the serial port may not appear.</p> <p>Solution:</p> <ul> <li>Install the correct USB drivers (e.g., CH340 or CP210x).</li> <li>Try a different USB cable (many are power-only).</li> <li>Restart the computer after driver installation.</li> <li>Use Device Manager to check if the device is recognized and assigned a COM port.</li> </ul>"},{"location":"windows/thonny-admin/#thonny-crashes-or-freezes","title":"Thonny Crashes or Freezes","text":"<p>Description: Thonny can crash or become unresponsive due to plugin issues, corrupted user settings, or insufficient memory on older machines.</p> <p>Solution:</p> <ul> <li>Reset Thonny\u2019s configuration:   Run the following command in a terminal:</li> </ul> <p><pre><code>thonny --reset\n</code></pre> * Alternatively, delete or rename the Thonny configuration folder:   <code>C:\\Users\\&lt;YourName&gt;\\AppData\\Roaming\\Thonny</code> * Update Thonny to the latest version, or try installing a previous stable version.</p>"},{"location":"windows/thonny-admin/#thonny-plugin-installation-fails","title":"Thonny Plugin Installation Fails","text":"<p>Description: When trying to install additional packages or plugins via Thonny\u2019s <code>Tools \u2192 Manage Packages</code>, the installation may fail.</p> <p>Solution:</p> <ul> <li>Ensure you're using the bundled Thonny Python interpreter.</li> <li>Use the \u201cSimple\u201d interface when prompted for installation options.</li> <li>If needed, install the package manually in the command line using:</li> </ul> <pre><code>C:\\Users\\&lt;YourName&gt;\\AppData\\Local\\Programs\\Thonny\\python.exe -m pip install &lt;package-name&gt;\n</code></pre>"},{"location":"windows/thonny-admin/#windows-defender-smartscreen-blocking-thonny","title":"Windows Defender SmartScreen Blocking Thonny","text":"<p>Description: The SmartScreen filter may prevent Thonny from running by showing a warning message.</p> <p>Solution:</p> <ul> <li>Click \"More info\" and then \"Run anyway.\"</li> <li>Consider whitelisting Thonny in your security software if this becomes recurring.</li> </ul> <p>Would you like this in PDF format or integrated into an install guide?</p>"}]}