{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"STEM Classroom Administration with AI","text":"<p>Welcome to the STEM Classroom Administration with AI website!</p> <p>Our goal is to help you learn to use AI to generate powerful scripts to automate the administration of STEM classrooms with a focus on teaching coding, compuational thinking and physical computing using microcontrollers.</p> <p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"about/","title":"About This Website","text":"<p>This website is intended for teachers or computer administrators that are creating environments that are used by students learning STEM and specifically learning computational thinking using physical computing.  Our focus is how to setup and configure computers that allow you to use microcontrollers like the Raspberry Pi Pico on Chromebooks, Raspberry Pi as well as on PCs and Macs.</p> <p>Creating a great user experience for students using a easy-to-used development tool like Thonny can be challenging.  Although the installation steps on the Mac and PC is straightforward, the steps on Raspberry Pi Linux or a Chromebook requires many specialized skills such as using the command line and writing installation scripts using the UNIX shell language.</p> <p>Furthermore, the latest versions of some operating systems like ChromeOS make it extremely difficult to automatically use USB ports due to security concerns.  Many scripts that have worked flawlessly in the past are no longer able to configure a USB port based on events.  Manual intervention is required.</p> <p>These increased security concerns has made the life of a STEM physical computing lab more difficult than ever!</p> <p>Luckily, we have a new tool: generative AI.  These tools can generate installations scripts that are hundreds of lines long that work flawlessly and give detailed step-by-step results as they progress through the installation and configuration steps.  The quality of scripts on this site would note have been possible without these tools.  We have used OpenAI's ChatGPT and Anthropic's Claude Sonnet to generate scripts, verify they work correctly and write documentation for these scripts.</p> <p>We hope you find these tools useful and we look forward to your feedback. Feel free to use the GitHub issues if you find any areas that need correction or improvement.</p> <p>Dan McCreary July 2025</p> <p>Please contact me on LinkedIn</p>"},{"location":"contact/","title":"Contact","text":"<p>Please contact me on LinkedIn</p> <p>Thanks! - Dan</p>"},{"location":"glossary/","title":"Glossary of Terms","text":""},{"location":"glossary/#iso-definition","title":"ISO Definition","text":"<p>A term definition is considered to be consistent with ISO metadata registry guideline 11179 if it meets the following criteria:</p> <ol> <li>Precise</li> <li>Concise</li> <li>Distinct</li> <li>Non-circular</li> <li>Unencumbered with business rules</li> </ol>"},{"location":"glossary/#term","title":"Term","text":"<p>This is the definition of the term.</p>"},{"location":"how-we-built-this-site/","title":"How We Built This Site","text":"<p>This page describes how we built this website and some of  the rationale behind why we made various design choices.</p>"},{"location":"how-we-built-this-site/#python","title":"Python","text":"<p>MicroSims are about how we use generative AI to create animations and simulations.  The language of AI is Python.  So we wanted to create a site that could be easily understood by Python developers.</p>"},{"location":"how-we-built-this-site/#mkdocs-vs-docusaurus","title":"Mkdocs vs. Docusaurus","text":"<p>There are two main tools used by Python developers to write documentation: Mkdocs and Docusaurus.  Mkdocs is easier to use and more popular than Docusaurus. Docusaurus is also optimized for single-page applications. Mkdocs also has an extensive library of themes and plugins. None of us are experts in JavaScript or React. Based on our ChatGPT Analysis of the Tradeoffs we chose mkdocs for this site management.</p>"},{"location":"how-we-built-this-site/#github-and-github-pages","title":"GitHub and GitHub Pages","text":"<p>GitHub is a logical choice to store our  site source code and documentation.  GitHub also has a Custom GitHub Action that does auto-deployment if any files on the site change. We don't currently have this action enabled, but other teams can use this feature if they don't have the ability to do a local build with mkdocs.</p> <p>GitHub also has Issues,  Projects and releases that we can use to manage our bugs and tasks.</p> <p>The best practice for low-cost websites that have public-only content is GitHub Pages. Mkdocs has a command (<code>mkdocs gh-deploy</code>) that does deployment directly to GitHub Pages.  This was an easy choice to make.</p>"},{"location":"how-we-built-this-site/#github-clone","title":"GitHub Clone","text":"<p>If you would like to clone this repository, here are the commands:</p> <pre><code>mkdir projects\ncd projects\ngit clone https://github.com/dmccreary/microsims\n</code></pre>"},{"location":"how-we-built-this-site/#after-changes","title":"After Changes","text":"<p>After you make local changes you must do the following:</p> <pre><code># add the new files to a a local commit transaction\ngit add FILES\n# Execute the a local commit with a message about what and why you are doing the commit\ngit commit -m \"comment\"\n# Update the central GitHub repository\ngit push\n</code></pre>"},{"location":"how-we-built-this-site/#material-theme","title":"Material Theme","text":"<p>We had several options when picking a mkdocs theme:</p> <ol> <li>Mkdocs default</li> <li>Readthedocs</li> <li>Third-Party Themes See Ranking</li> </ol> <p>The Material Theme had 16K stars.  No other theme had over a few hundred. This was also an easy design decision.</p> <p>One key criterial was the social Open Graph tags so that when our users post a link to a simulation, the image of the simulation is included in the link.  Since Material supported this, we used the Material theme. You can see our ChatGPT Design Decision Analysis if you want to check our decision process.</p>"},{"location":"how-we-built-this-site/#enable-edit-icon","title":"Enable Edit Icon","text":"<p>To enable the Edit icon on all pages, you must add the edit_uri and the content.action.edit under the theme features area.</p> <pre><code>edit_uri: edit/master/docs/\n</code></pre> <pre><code>    theme:\n        features:\n            - content.action.edit\n</code></pre>"},{"location":"how-we-built-this-site/#conda-vs-venv","title":"Conda vs VENV","text":"<p>There are two choices for virtual environments.  We can use the native Python venv or use Conda.  venv is simle but is only designed for pure Python projects.  We imagine that this site could use JavaScript and other langauges in the future, so we picked Conda. There is nothing on this microsite that prevents you from using one or the other.  See the ChatGPT Analysis Here.</p> <p>Here is the conda script that we ran to create a new mkdocs environment that also supports the material social imaging libraries.</p> <pre><code>conda deactivate\nconda create -n mkdocs python=3\nconda activate mkdocs\npip install mkdocs \"mkdocs-material[imaging]\"\n</code></pre>"},{"location":"how-we-built-this-site/#mkdocs-commands","title":"Mkdocs Commands","text":"<p>There are three simple mkdoc commands we use.</p>"},{"location":"how-we-built-this-site/#local-build","title":"Local Build","text":"<pre><code>mkdocs build\n</code></pre> <p>This builds your website in a folder called <code>site</code>.  Use this to test that the mkdocs.yml site is working and does not have any errors.</p>"},{"location":"how-we-built-this-site/#run-a-local-server","title":"Run a Local Server","text":"<pre><code>mkdocs serve\n</code></pre> <p>This runs a server on <code>http://localhost:8000</code>. Use this to test the display formatting locally before you push your code up to the GitHub repo.</p> <pre><code>mkdoc gh-deploy\n</code></pre> <p>This pushes everything up to the GitHub Pages site. Note that it does not commit your code to GitHub.</p>"},{"location":"how-we-built-this-site/#mkdocs-material-social-tags","title":"Mkdocs Material Social Tags","text":"<p>We are using the Material Social tags.  This is a work in progress!</p> <p>Here is what we have learned.</p> <ol> <li>There are extensive image processing libraries that can't be installed with just pip.  You will need to run a tool like brew on the Mac to get the libraries installed.</li> <li>Even after <code>brew</code> installs the libraries, you have to get your environment to find the libraries.  The only way I could get that to work was to set up a local UNIX environment variable.</li> </ol> <p>Here is the brew command that I ran:</p> <pre><code>brew install cairo freetype libffi libjpeg libpng zlib\n</code></pre> <p>I then had to add the following to my ~/.zshrc file:</p> <pre><code>export DYLD_FALLBACK_LIBRARY_PATH=/opt/homebrew/lib\n</code></pre> <p>Note that I am running on a Mac with Apple silicon.  This means that the image libraries that brew downloads must be specific to the Mac Arm instruction set.</p> <ul> <li>Cover images for blog post #4364</li> <li>Discussion on overriding the Social Card Image</li> </ul>"},{"location":"license/","title":"Creative Commons License","text":"<p>All content in this repository is governed by the following license agreement:</p>"},{"location":"license/#license-type","title":"License Type","text":"<p>Attribution-NonCommercial-ShareAlike 4.0 International (CC BY-NC-SA 4.0 DEED)</p>"},{"location":"license/#link-to-license-agreement","title":"Link to License Agreement","text":"<p>https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en</p>"},{"location":"license/#your-rights","title":"Your Rights","text":"<p>You are free to:</p> <ul> <li>Share \u2014 copy and redistribute the material in any medium or format</li> <li>Adapt \u2014 remix, transform, and build upon the material</li> </ul> <p>The licensor cannot revoke these freedoms as long as you follow the license terms.</p>"},{"location":"license/#restrictions","title":"Restrictions","text":"<ul> <li>Attribution \u2014 You must give appropriate credit, provide a link to the license, and indicate if changes were made. You may do so in any reasonable manner, but not in any way that suggests the licensor endorses you or your use.</li> <li>NonCommercial \u2014 You may not use the material for commercial purposes.</li> <li>ShareAlike \u2014 If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original.</li> <li>No additional restrictions \u2014 You may not apply legal terms or technological measures that legally restrict others from doing anything the license permits.</li> </ul> <p>Notices</p> <p>You do not have to comply with the license for elements of the material in the public domain or where your use is permitted by an applicable exception or limitation.</p> <p>No warranties are given. The license may not give you all of the permissions necessary for your intended use. For example, other rights such as publicity, privacy, or moral rights may limit how you use the material.</p> <p>This deed highlights only some of the key features and terms of the actual license. It is not a license and has no legal value. You should carefully review all of the terms and conditions of the actual license before using the licensed material.</p>"},{"location":"references/","title":"Site References","text":"<ol> <li>mkdocs - https://www.mkdocs.org/ - this is our tool for building the website.  It converts Markdown into HTML in the <code>site</code> directory.</li> <li>mkdocs material theme - https://squidfunk.github.io/mkdocs-material/ - this is the theme for our site.  The theme adds the user interface elements that give our site the look and feel.  It also has the features such as social cards.</li> <li>GitHub Pages - https://pages.github.com/ - this is the free tool for hosting public websites created by mkdocs</li> <li>Markdown - https://www.mkdocs.org/user-guide/writing-your-docs/#writing-with-markdown - this is the format we use for text.  It allows us to have headers, lists, tables, links and images without learning HTML.</li> <li>Deploy Mkdocs GitHub Action - https://github.com/marketplace/actions/deploy-mkdocs - this is the tool we use to automatically build our site after edits are checked in with Git.</li> <li>Git Book - https://git-scm.com/book/en/v2 - a useful book on Git.  Just read the first two chapters to learn how to check in new code.</li> <li>Conda - https://conda.io/ - this is a command line tool that keeps our Python libraries organized for each project.</li> <li>VS Code - https://code.visualstudio.com/ - this is the integrated development environment we use to mange the files on our website.</li> <li>Markdown Paste - https://marketplace.visualstudio.com/items?itemName=telesoho.vscode-markdown-paste-image - this is the VS code extension we use to make sure we keep the markdown format generated by ChatGPT.</li> </ol>"},{"location":"usb-debug/","title":"Raspberry Pi Pico USB Issues on ChromeOS Crostini: Complete Troubleshooting Guide","text":"<p>The \"MicroPython board in FS Mode\" showing in lsusb after disconnection indicates a USB device caching issue in ChromeOS/Crostini, not a hardware problem with the Pico. This comprehensive guide provides systematic solutions to restore proper USB connectivity for your Raspberry Pi Pico and Thonny IDE on ChromeOS Linux containers.</p>"},{"location":"usb-debug/#understanding-the-core-issue","title":"Understanding the core issue","text":"<p>Critical insight: \"MicroPython board in FS Mode\" is the normal, expected state when MicroPython firmware is running properly on your Pico. The problem isn't a \"stuck\" Pico, but rather ChromeOS/Crostini's USB subsystem not properly detecting the disconnection. This creates phantom device entries that prevent new connections from working correctly.</p> <p>Device identification: Your Pico appears with USB ID <code>2E8A:0005</code> in MicroPython mode and shows as a serial device at <code>/dev/ttyACM0</code>. The persistent lsusb listing suggests the Crostini container hasn't updated its USB device cache after disconnection.</p>"},{"location":"usb-debug/#immediate-diagnostic-steps","title":"Immediate diagnostic steps","text":"<p>Start with these commands to assess the current state:</p> <pre><code># Check current USB device status\nlsusb | grep -E \"(MicroPython|2e8a)\"\nls -la /dev/ttyACM* 2&gt;/dev/null\ndmesg | grep -i usb | tail -10\n\n# Monitor for real disconnection events  \ndmesg -w | grep -i usb &amp;\n# Now physically disconnect/reconnect the Pico and observe output\n</code></pre> <p>If dmesg shows no disconnect events when unplugging, the issue is confirmed as container-level USB caching.</p>"},{"location":"usb-debug/#step-by-step-resolution-procedures","title":"Step-by-step resolution procedures","text":""},{"location":"usb-debug/#method-1-container-restart-recommended-first-attempt","title":"Method 1: Container restart (recommended first attempt)","text":"<p>ChromeOS Crostini uses a layered architecture where USB devices are forwarded from the host through the Termina VM to your Penguin container. Restarting the container often clears cached USB device state.</p> <pre><code># From ChromeOS: Right-click Terminal icon in shelf \u2192 \"Shut down Linux\"\n# Wait 30 seconds, then reopen Terminal\n# Verify device cache is cleared:\nlsusb | grep -E \"(MicroPython|2e8a)\"\n</code></pre> <p>Alternative container restart via crosh: <pre><code># Press Ctrl+Alt+T to open crosh terminal\ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina\n# Exit crosh and restart Terminal\n</code></pre></p>"},{"location":"usb-debug/#method-2-usb-subsystem-reset-within-container","title":"Method 2: USB subsystem reset within container","text":"<p>If container restart doesn't resolve the issue, force a USB subsystem refresh:</p> <pre><code># Reset USB device enumeration\nsudo systemctl restart systemd-udevd\n\n# Reload and trigger udev rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger --subsystem-match=usb\n\n# Clear any cached device listings\nsudo modprobe -r usbserial\nsudo modprobe usbserial\n</code></pre>"},{"location":"usb-debug/#method-3-chromeos-usb-device-management","title":"Method 3: ChromeOS USB device management","text":"<p>ChromeOS requires explicit USB device sharing with Linux containers. Reset the sharing configuration:</p> <ol> <li>Navigate to: ChromeOS Settings \u2192 Advanced \u2192 Developers \u2192 Linux development environment \u2192 Manage USB devices</li> <li>If \"Board in FS Mode\" or similar Pico device is listed, toggle it OFF then ON</li> <li>If no Pico device appears, physically reconnect while holding BOOTSEL button</li> <li>The Pico should appear as \"RPI-RP2\" drive first, then as \"MicroPython board\" after releasing BOOTSEL</li> </ol> <p>Enable advanced USB support via Chrome flags: <pre><code>chrome://flags/#crostini-usb-allow-unsupported\n</code></pre> Set to \"Enabled\" and restart Chrome.</p>"},{"location":"usb-debug/#method-4-complete-vm-restart","title":"Method 4: Complete VM restart","text":"<p>For persistent issues, restart the entire Termina VM:</p> <pre><code># In crosh (Ctrl+Alt+T):\ncrosh&gt; vmc list              # Verify termina is running  \ncrosh&gt; vmc stop termina\ncrosh&gt; vmc start termina --enable-audio-capture\n</code></pre> <p>This performs a complete reset of the USB forwarding layer between ChromeOS and your container.</p>"},{"location":"usb-debug/#thonny-ide-connectivity-restoration","title":"Thonny IDE connectivity restoration","text":"<p>Once USB device caching is resolved, configure Thonny for reliable Pico connectivity:</p>"},{"location":"usb-debug/#install-thonny-correctly-on-chromeos","title":"Install Thonny correctly on ChromeOS","text":"<pre><code># Update system and install dependencies\nsudo apt update &amp;&amp; sudo apt upgrade -y\nsudo apt install python3-tk python3-pip wget curl -y\n\n# Install Thonny using official installer (recommended)\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n\n# Installation path: ~/apps/thonny/bin/thonny\n</code></pre>"},{"location":"usb-debug/#configure-serial-port-permissions","title":"Configure serial port permissions","text":"<pre><code># Add user to dialout group for serial access\nsudo usermod -a -G dialout $USER\nsudo usermod -a -G plugdev $USER\n\n# Remove brltty conflicts (common on Ubuntu 22.04+)\nsudo apt purge brltty -y\n\n# Reboot to apply group changes\nsudo reboot\n</code></pre>"},{"location":"usb-debug/#set-up-thonny-interpreter","title":"Set up Thonny interpreter","text":"<ol> <li>Launch Thonny: <code>~/apps/thonny/bin/thonny</code></li> <li>Go to Run \u2192 Select interpreter</li> <li>Choose MicroPython (Raspberry Pi Pico) or MicroPython (generic)</li> <li>If using generic, manually select port: <code>/dev/ttyACM0</code></li> <li>Test connection: <pre><code>print(\"Hello from Pico!\")\nhelp()\n</code></pre></li> </ol>"},{"location":"usb-debug/#advanced-troubleshooting-for-persistent-issues","title":"Advanced troubleshooting for persistent issues","text":""},{"location":"usb-debug/#fix-udev-rules-and-permissions","title":"Fix udev rules and permissions","text":"<p>Create comprehensive USB permission rules:</p> <pre><code># Create universal USB permissions rule\nsudo tee /etc/udev/rules.d/99-pico-permissions.rules &lt;&lt; 'EOF'\n# Raspberry Pi Pico permissions\nKERNEL==\"ttyACM[0-9]*\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"dialout\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"plugdev\"\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0003\", MODE=\"0666\", GROUP=\"plugdev\"\nEOF\n\n# Apply rules immediately\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"usb-debug/#hardware-level-pico-reset-procedures","title":"Hardware-level Pico reset procedures","text":"<p>If the Pico appears genuinely unresponsive (rare), perform a hardware reset:</p> <p>Method 1 - BOOTSEL reset: 1. Hold BOOTSEL button on Pico 2. Connect USB cable (or press/release reset button if available) 3. Release BOOTSEL button 4. Pico appears as \"RPI-RP2\" drive 5. Install fresh MicroPython firmware from https://micropython.org/download/rp2-pico/</p> <p>Method 2 - Software reset from MicroPython: <pre><code># In Thonny or Python REPL:\nimport machine\nmachine.bootloader()  # Forces Pico into BOOTSEL mode\n</code></pre></p>"},{"location":"usb-debug/#comprehensive-system-verification","title":"Comprehensive system verification","text":"<p>Create a verification script to check all components:</p> <pre><code>#!/bin/bash\necho \"=== ChromeOS Crostini Pico Diagnostics ===\"\necho \"USB devices:\"\nlsusb | grep -E \"(2e8a|MicroPython)\" || echo \"No Pico devices found\"\n\necho -e \"\\nSerial devices:\"\nls -la /dev/ttyACM* 2&gt;/dev/null || echo \"No ACM devices\"\n\necho -e \"\\nUser groups:\"\ngroups $USER | grep -E \"(dialout|plugdev)\" || echo \"Missing required groups\"\n\necho -e \"\\nCrOS USB sharing status:\"\nls -la /mnt/chromeos/removable/ | grep -i pico || echo \"No shared devices\"\n\necho -e \"\\nRecent USB events:\"\ndmesg | grep -i usb | tail -5\n\necho -e \"\\nThonny installation:\"\ntest -f ~/apps/thonny/bin/thonny &amp;&amp; echo \"Thonny installed correctly\" || echo \"Thonny not found\"\n</code></pre>"},{"location":"usb-debug/#prevention-and-monitoring","title":"Prevention and monitoring","text":""},{"location":"usb-debug/#set-up-usb-monitoring","title":"Set up USB monitoring","text":"<p>Monitor USB events to catch future issues early:</p> <pre><code># Real-time USB event monitoring\nudevadm monitor --subsystem-match=usb &amp;\ndmesg -w | grep -i usb &amp;\n</code></pre>"},{"location":"usb-debug/#disable-problematic-power-management","title":"Disable problematic power management","text":"<p>USB autosuspend can cause connectivity issues:</p> <pre><code># Disable autosuspend for Pico devices\necho 'ACTION==\"add\", SUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTR{power/autosuspend}=\"-1\"' | sudo tee -a /etc/udev/rules.d/50-usb-autosuspend.rules\n\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"usb-debug/#when-all-else-fails","title":"When all else fails","text":""},{"location":"usb-debug/#alternative-development-approaches","title":"Alternative development approaches","text":"<p>Web-based development: If USB continues to fail, use web-based MicroPython IDEs: - BIPES (https://bipes.net.br/) - Full web-based MicroPython IDE - BeagleTerm Chrome extension for REPL access</p> <p>Network-based solutions: Configure MicroPython for WiFi connectivity (Pico W) and use network-based development tools.</p>"},{"location":"usb-debug/#enterpriseschool-chromebook-considerations","title":"Enterprise/school Chromebook considerations","text":"<p>Managed ChromeOS devices may have USB restrictions: - Contact IT administrator to whitelist Raspberry Pi Pico devices - Request addition of USB ID <code>2e8a:0005</code> to approved device list - Alternative: Use web-based development tools that don't require USB access</p>"},{"location":"usb-debug/#resolution-verification-checklist","title":"Resolution verification checklist","text":"<p>After implementing fixes, verify resolution:</p> <ul> <li>[ ] <code>lsusb</code> shows correct USB device state when connected/disconnected</li> <li>[ ] <code>/dev/ttyACM0</code> appears when Pico is connected, disappears when unplugged</li> <li>[ ] dmesg shows proper connect/disconnect events</li> <li>[ ] Thonny can connect to Pico and access REPL</li> <li>[ ] User is member of dialout and plugdev groups</li> <li>[ ] ChromeOS USB sharing is properly configured</li> <li>[ ] No phantom devices persist after physical disconnection</li> </ul> <p>Success indicators: When working correctly, connecting your Pico should show connection messages in dmesg, create <code>/dev/ttyACM0</code>, and allow Thonny to immediately detect and connect to the device. Disconnection should remove the device from <code>/dev/</code> and clear it from active USB listings.</p> <p>The root cause of \"MicroPython board in FS Mode\" persisting in lsusb output is ChromeOS/Crostini USB device caching, not a hardware problem with your Pico. Following this systematic troubleshooting approach should restore proper USB connectivity for your development workflow.</p>"},{"location":"chromebook/developer-mode/","title":"Developer Mode on ChromeOS","text":"<p>Standard mode and developer mode represent fundamentally different approaches to ChromeOS security and functionality, with developer mode offering expanded hardware access and system control at the cost of built-in security protections.</p>"},{"location":"chromebook/developer-mode/#standard-mode-normal-chromeos","title":"Standard Mode (Normal ChromeOS)","text":"<p>Standard mode prioritizes security through strict system lockdown:</p>"},{"location":"chromebook/developer-mode/#security-features","title":"Security Features","text":"<ul> <li>Verified boot - System integrity checked at every startup</li> <li>Read-only root filesystem - Core system files cannot be modified</li> <li>Sandboxed applications - All apps run in isolated containers</li> <li>Automatic updates - Security patches applied transparently</li> <li>No root access - Users cannot access system-level functions</li> </ul>"},{"location":"chromebook/developer-mode/#hardware-limitations","title":"Hardware Limitations","text":"<ul> <li>Restricted USB access - Only approved device types can connect</li> <li>Limited terminal access - Crosh terminal with basic commands only</li> <li>Container-based Linux - Crostini runs in isolated environment</li> <li>Policy enforcement - Administrator restrictions cannot be bypassed</li> </ul>"},{"location":"chromebook/developer-mode/#your-current-situation","title":"Your Current Situation","text":"<ul> <li>Jump drive appears in Files but not accessible to Linux container</li> <li><code>lsusb</code> shows no devices despite physical connections</li> <li>Chrome flags may be disabled by administrative policy</li> <li>USB sharing controlled by enterprise/education restrictions</li> </ul>"},{"location":"chromebook/developer-mode/#developer-mode-capabilities","title":"Developer Mode Capabilities","text":"<p>Developer mode removes security restrictions to enable development and system modification:</p>"},{"location":"chromebook/developer-mode/#enhanced-access","title":"Enhanced Access","text":"<ul> <li>Root shell access - Full system control via VT-2 (Ctrl+Alt+F2)</li> <li>Read-write filesystem - Ability to modify system files</li> <li>Custom firmware - Can install alternative operating systems</li> <li>Hardware debugging - Direct access to system hardware</li> <li>Unrestricted USB - Full USB device access without policy restrictions</li> </ul>"},{"location":"chromebook/developer-mode/#development-features","title":"Development Features","text":"<ul> <li>Native Linux installation - Run full Linux distributions alongside ChromeOS</li> <li>Kernel module loading - Install custom drivers and system extensions</li> <li>Cross-compilation - Build software for different architectures</li> <li>Hardware hacking - Direct GPIO, SPI, I2C access on supported devices</li> <li>Crouton support - Install Ubuntu/Debian with chroot environments</li> </ul>"},{"location":"chromebook/developer-mode/#usb-and-hardware-benefits","title":"USB and Hardware Benefits","text":"<ul> <li>Bypass USB policies - Administrative restrictions don't apply</li> <li>Direct device access - Hardware communicates without container isolation</li> <li>Custom drivers - Install specialized device drivers</li> <li>Development tools - Full access to debugging and development hardware</li> </ul>"},{"location":"chromebook/developer-mode/#security-trade-offs-and-risks","title":"Security Trade-offs and Risks","text":"<p>Developer mode fundamentally compromises ChromeOS security model:</p>"},{"location":"chromebook/developer-mode/#removed-protections","title":"Removed Protections","text":"<ul> <li>No verified boot - System integrity not enforced</li> <li>Vulnerable to malware - Root access enables system-level attacks</li> <li>Physical security risk - Anyone with device access can compromise system</li> <li>Enterprise incompatibility - Managed devices often prohibit developer mode</li> </ul>"},{"location":"chromebook/developer-mode/#warning-implications","title":"Warning Implications","text":"<ul> <li>Persistent warning screen - 30-second delay at every boot</li> <li>Easy system wipe - Pressing spacebar at warning erases everything</li> <li>No enterprise support - IT departments typically block or discourage use</li> <li>Warranty considerations - May affect support coverage</li> </ul>"},{"location":"chromebook/developer-mode/#data-security-concerns","title":"Data Security Concerns","text":"<ul> <li>Encryption bypass - Developer mode can access normally protected data</li> <li>Network vulnerability - Reduced protection against network-based attacks</li> <li>Physical access risk - Device compromise possible with brief physical access</li> </ul>"},{"location":"chromebook/developer-mode/#enabling-developer-mode-process","title":"Enabling Developer Mode Process","text":"<p>\u26a0\ufe0f WARNING: This process completely erases your Chromebook and voids enterprise management!</p>"},{"location":"chromebook/developer-mode/#prerequisites","title":"Prerequisites","text":"<ul> <li>Personal device ownership - Must not be enterprise/education managed</li> <li>Data backup - Everything will be erased during transition</li> <li>Time availability - Process takes 30-60 minutes to complete</li> <li>Understanding of risks - Security implications must be accepted</li> </ul>"},{"location":"chromebook/developer-mode/#step-by-step-process","title":"Step-by-Step Process","text":"<ol> <li>Create recovery media - Download ChromeOS recovery image first</li> <li>Enter recovery mode - Hold Esc+Refresh, press Power button</li> <li>Enable developer mode - Press Ctrl+D at recovery screen</li> <li>Confirm transition - Press Enter to begin (erases everything)</li> <li>Wait for completion - Process takes 15-30 minutes</li> <li>Configure system - Set up ChromeOS without enterprise enrollment</li> </ol>"},{"location":"chromebook/developer-mode/#post-installation-setup","title":"Post-Installation Setup","text":"<ul> <li>Skip enterprise enrollment - Don't connect to managed networks initially</li> <li>Enable developer features - Access requires additional configuration</li> <li>Install development tools - Crouton, Linux distributions, development environments</li> </ul>"},{"location":"chromebook/developer-mode/#would-developer-mode-solve-your-usb-problem","title":"Would Developer Mode Solve Your USB Problem?","text":"<p>Yes, developer mode would likely resolve your Raspberry Pi Pico connectivity issues:</p>"},{"location":"chromebook/developer-mode/#direct-benefits","title":"Direct Benefits","text":"<ul> <li>Bypass USB policies - Administrative restrictions no longer apply</li> <li>Native hardware access - USB devices connect without container limitations</li> <li>Custom driver installation - Install specialized USB/serial drivers if needed</li> <li>Alternative development environments - Use Crouton or native Linux for programming</li> </ul>"},{"location":"chromebook/developer-mode/#alternative-solutions-to-consider-first","title":"Alternative Solutions to Consider First","text":"<p>Before enabling developer mode, try these safer approaches:</p> <ol> <li>Request IT approval - Ask for Raspberry Pi Pico USB ID (2e8a:0005) allowlisting</li> <li>Use personal device - Borrow/use unmanaged Chromebook if available</li> <li>Web-based development - Online MicroPython IDEs like BIPES</li> <li>Network programming - Use Pico W with WiFi instead of USB</li> </ol>"},{"location":"chromebook/developer-mode/#recommendation-for-your-situation","title":"Recommendation for Your Situation","text":"<p>If this is a personal Chromebook: Developer mode would solve your USB connectivity issues but consider the security trade-offs carefully.</p> <p>If this is a managed device: Contact your IT department first - enabling developer mode may violate policies and could result in device confiscation or disciplinary action.</p> <p>Alternative consideration: Many educational institutions have specific policies about developer mode. Check your acceptable use policy before proceeding.</p> <p>The decision ultimately depends on your specific needs, device ownership status, and comfort with the security implications. Developer mode is powerful but comes with significant responsibilities.</p>"},{"location":"chromebook/developer-mode/#single-user-develper-mode","title":"Single User Develper Mode","text":"<p>Prompt</p> <p>Can I put a single user into developer mode under Linux?</p> <p>No, you cannot put a single user into \"developer mode\" because developer mode is a system-wide ChromeOS setting that affects the entire Chromebook, not individual users or the Linux container.</p>"},{"location":"chromebook/developer-mode/#understanding-the-distinction","title":"Understanding the Distinction","text":""},{"location":"chromebook/developer-mode/#chromeos-developer-mode-vs-linux-user-permissions","title":"ChromeOS Developer Mode vs Linux User Permissions","text":"<p>Developer mode operates at the ChromeOS firmware/hardware level: - Affects the entire Chromebook device - Changes how the system boots and enforces security - Cannot be enabled for individual users - Requires physical access to the device and complete system wipe</p> <p>Linux user permissions operate within the container: - Affect only what users can do inside the Linux environment - Can be modified per-user within the existing system - Don't change ChromeOS hardware access policies - Won't solve USB sharing restrictions from ChromeOS to Linux</p>"},{"location":"chromebook/developer-mode/#what-you-can-do-within-the-linux-container","title":"What You CAN Do Within the Linux Container","text":""},{"location":"chromebook/developer-mode/#elevate-user-privileges","title":"Elevate User Privileges","text":"<pre><code># Add your user to sudo group (if not already)\nsudo usermod -a -G sudo $USER\n\n# Add to additional groups for hardware access\nsudo usermod -a -G dialout,plugdev,audio,video $USER\n\n# Log out and back in for changes to take effect\n</code></pre>"},{"location":"chromebook/developer-mode/#install-development-tools","title":"Install Development Tools","text":"<pre><code># Install development packages\nsudo apt update\nsudo apt install build-essential git python3-dev nodejs npm\n\n# Install USB/serial utilities\nsudo apt install minicom screen picocom setserial\n\n# Install clipboard tools\nsudo apt install xclip wl-clipboard\n</code></pre>"},{"location":"chromebook/developer-mode/#configure-usb-device-rules","title":"Configure USB Device Rules","text":"<pre><code># Create udev rules for your specific hardware\nsudo nano /etc/udev/rules.d/99-raspberry-pi-pico.rules\n\n# Add content:\nSUBSYSTEM==\"usb\", ATTRS{idVendor}==\"2e8a\", ATTRS{idProduct}==\"0005\", MODE=\"0666\", GROUP=\"dialout\"\n\n# Reload rules\nsudo udevadm control --reload-rules\nsudo udevadm trigger\n</code></pre>"},{"location":"chromebook/developer-mode/#why-this-wont-solve-your-usb-problem","title":"Why This Won't Solve Your USB Problem","text":""},{"location":"chromebook/developer-mode/#the-real-issue-chromeos-to-linux-usb-sharing","title":"The Real Issue: ChromeOS to Linux USB Sharing","text":"<p>Your problem exists at the ChromeOS system level, not within Linux:</p> <ol> <li>ChromeOS can see your USB devices (jump drive appears in Files)</li> <li>ChromeOS policy prevents sharing these devices with Linux container</li> <li>Linux container never receives USB device access from ChromeOS</li> <li>Linux user permissions are irrelevant if devices never reach Linux</li> </ol>"},{"location":"chromebook/developer-mode/#the-usb-access-chain","title":"The USB Access Chain","text":"<pre><code>Hardware \u2192 ChromeOS \u2192 USB Sharing Policy \u2192 Linux Container \u2192 User Permissions\n                          \u2191\n                    Your bottleneck is here\n</code></pre> <p>No amount of Linux user configuration can bypass ChromeOS USB sharing restrictions.</p>"},{"location":"chromebook/developer-mode/#alternative-approaches-within-current-constraints","title":"Alternative Approaches Within Current Constraints","text":""},{"location":"chromebook/developer-mode/#web-based-development","title":"Web-Based Development","text":"<p>Use browser-based MicroPython IDEs: - BIPES (https://bipes.net.br/) - Full web-based MicroPython environment - Online Python editors with MicroPython simulators - Tinkercad Circuits for electronics simulation</p>"},{"location":"chromebook/developer-mode/#network-based-programming","title":"Network-Based Programming","text":"<p>If you have a Raspberry Pi Pico W (WiFi version): <pre><code># Configure Pico W for WiFi development\nimport network\nimport socket\n\nwlan = network.WLAN(network.STA_IF)\nwlan.active(True)\nwlan.connect('your_wifi', 'password')\n\n# Create web-based programming interface\n# Upload code via web interface instead of USB\n</code></pre></p>"},{"location":"chromebook/developer-mode/#hybrid-development-approach","title":"Hybrid Development Approach","text":"<pre><code># Develop and test code in Linux container\nnano my_pico_code.py\n\n# Use web tools to transfer code to Pico\n# Copy/paste through browser-based editors\n</code></pre>"},{"location":"chromebook/developer-mode/#request-hardware-alternatives","title":"Request Hardware Alternatives","text":"<p>Ask your institution for: - USB devices that are already allowlisted - Raspberry Pi with network connectivity - Development boards with browser-based programming - Simulators that don't require physical hardware</p>"},{"location":"chromebook/developer-mode/#what-about-sudo-access","title":"What About sudo Access?","text":""},{"location":"chromebook/developer-mode/#you-likely-already-have-it","title":"You Likely Already Have It","text":"<pre><code># Check if you have sudo access\nsudo -l\n\n# If you get output showing permissions, you already have developer-level access within Linux\n</code></pre>"},{"location":"chromebook/developer-mode/#verify-your-current-permissions","title":"Verify Your Current Permissions","text":"<pre><code># Check your groups\ngroups\n\n# Check USB device access (even though devices aren't shared)\nls -la /dev/ttyACM* /dev/ttyUSB*\n\n# Check if you can install packages\nsudo apt update\n</code></pre>"},{"location":"chromebook/developer-mode/#the-bottom-line","title":"The Bottom Line","text":"<p>The limitation you're facing is administrative/policy-based, not technical or user permission-based. Even with full root access within the Linux container, you cannot bypass ChromeOS USB sharing policies that prevent devices from reaching the container in the first place.</p> <p>Your options are: 1. Request IT approval for USB device access 2. Use web-based development tools that don't require USB 3. Switch to a personal/unmanaged device for development 4. Enable ChromeOS developer mode (if allowed and you accept security risks)</p> <p>Linux user permissions alone cannot solve USB hardware access restrictions imposed by ChromeOS system policies.</p>"},{"location":"chromebook/setting-up-developer-mode/","title":"Step by Step Guide for Setting Up Developer Mode","text":""},{"location":"chromebook/setting-up-developer-mode/#how-to-put-a-chromebook-into-developer-mode-step-by-step-guide","title":"How to Put a Chromebook into Developer Mode: Step-by-Step Guide","text":"<p>\u26a0\ufe0f Warning: Enabling Developer Mode will wipe all local data, including files, apps, and settings. Be sure to back up anything important before you begin.</p>"},{"location":"chromebook/setting-up-developer-mode/#step-0-prepare","title":"\u2705 Step 0: Prepare","text":"<ul> <li>Backup your data (Google Drive, USB stick, or external hard drive).</li> <li>Make sure your Chromebook is charged or plugged in.</li> <li>Know that Developer Mode disables verified boot, so you\u2019ll see a scary screen every time you start up \u2014 this is expected.</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#step-1-enter-recovery-mode","title":"\ud83e\uddd1\u200d\ud83d\udcbb Step 1: Enter Recovery Mode","text":"<ol> <li>Turn off your Chromebook.</li> <li> <p>Press and hold these keys simultaneously:</p> </li> <li> <p>Esc + Refresh (\ud83d\udd01), then press the Power button.</p> </li> <li>Release all keys when you see a white screen with a yellow exclamation mark or a message like \"Chrome OS is missing or damaged.\"</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#step-2-enable-developer-mode","title":"\u2699\ufe0f Step 2: Enable Developer Mode","text":"<ol> <li>On the recovery screen, press Ctrl + D.</li> <li>You will be prompted:    \u201cTo turn OS verification OFF, press ENTER.\u201d</li> <li>Press Enter.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#step-3-wait-for-powerwash-device-reset","title":"\ud83e\uddf9 Step 3: Wait for Powerwash (Device Reset)","text":"<ul> <li>The system will reboot and begin the transition to Developer Mode.</li> <li>This takes 5 to 10 minutes. You\u2019ll see a screen that says:</li> </ul> <p>\"Preparing system for Developer Mode. This may take a while.\"</p> <p>This process erases all local data (Powerwash), and once complete, the device will reboot again.</p>"},{"location":"chromebook/setting-up-developer-mode/#step-4-startup-behavior-in-developer-mode","title":"\u26a0\ufe0f Step 4: Startup Behavior in Developer Mode","text":"<p>Every time you boot, you\u2019ll see a \u201cOS verification is OFF\u201d screen.</p> <ul> <li>To continue booting: press Ctrl + D or wait 30 seconds.</li> <li>To go back to normal mode: press Spacebar, then confirm.</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#step-5-access-the-linux-shell-crosh-and-bash","title":"\ud83d\udee0\ufe0f Step 5: Access the Linux Shell (Crosh and Bash)","text":"<ol> <li>Once booted, sign into Wi-Fi.</li> <li>Press Ctrl + Alt + T to open Crosh (Chrome Shell).</li> <li>Type <code>shell</code> and press Enter.</li> <li>Now you are in a full Bash shell and can run commands like <code>sudo</code>, install dev tools, or run scripts.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#optional-disable-root-file-system-verification","title":"\ud83e\uddef Optional: Disable Root File System Verification","text":"<p>If you're doing root-level development:</p> <pre><code>sudo su\n/usr/share/vboot/bin/make_dev_ssd.sh --remove_rootfs_verification\n</code></pre> <p>Then reboot.</p>"},{"location":"chromebook/setting-up-developer-mode/#to-exit-developer-mode-re-enable-verified-boot","title":"\ud83d\udd04 To Exit Developer Mode (Re-enable Verified Boot)","text":"<ol> <li>Reboot your Chromebook.</li> <li>On the \"OS verification is OFF\" screen, press Spacebar.</li> <li>Confirm when prompted \u2014 this will Powerwash again and return to normal mode.</li> </ol>"},{"location":"chromebook/setting-up-developer-mode/#developer-mode-enabled","title":"\u2705 Developer Mode Enabled!","text":"<p>You\u2019re now ready to:</p> <ul> <li>Install custom Linux distros</li> <li>Sideload APKs (on supported Chromebooks)</li> <li>Access full root shell</li> <li>Modify system files and services</li> </ul>"},{"location":"chromebook/setting-up-developer-mode/#references","title":"References","text":"<p>YouTube Video Showing Steps to Put Chromebook into Developer Mode</p>"},{"location":"chromebook/thonny-admin/","title":"Thonny Admin","text":"<p>We want to give our students a great experience using Thonny.  Here are a few things to not about the screen image above.</p> <ol> <li>There is a Thonny icon directly on the desktop</li> <li>Thonny is configured to view both the files on the Raspberry Pi Pico (each lab has a file)</li> <li>Thonny can see the port <code>/dev/ttyACM0</code> and can connect directly to the Pico</li> </ol> <p>Getting to this stage is not difficult, but it does require going through several steps.  Here is a quick summary of these steps:</p> <ol> <li>Install Linux (Crostini)</li> <li>Open the terminal and install pip </li> <li>Use pip to install Thonny</li> <li>Run Thonny from the command line or setup a desktop icon</li> </ol>"},{"location":"chromebook/thonny-admin/#who-can-enable-linux-crostini-on-a-chromebook","title":"Who Can Enable Linux (Crostini) on a Chromebook","text":""},{"location":"chromebook/thonny-admin/#allowed","title":"\u2705 Allowed:","text":"<ol> <li>The Chromebook\u2019s Owner account (the first Google account used to set up the device)</li> <li>User accounts with Linux enabled by the owner or admin</li> <li>Managed devices (school/work) only if the admin has allowed Linux</li> </ol>"},{"location":"chromebook/thonny-admin/#not-allowed","title":"\u274c Not Allowed:","text":"<ol> <li>Guest mode or Incognito users</li> <li>Child accounts (Family Link) by default</li> <li>Managed Chromebooks (e.g., issued by schools) where Linux is disabled via Google Admin Console</li> </ol> <p>Secondary accounts on the Chromebook, unless Linux is enabled per user</p>"},{"location":"chromebook/thonny-admin/#steps","title":"Steps","text":""},{"location":"chromebook/thonny-admin/#step-1-install-linux","title":"Step 1: Install Linux","text":"<p>The only reliable way to run Thonny on a Chromebook to program a Raspberry Pi Pico is by using the Linux (Crostini) environment within ChromeOS. </p>"},{"location":"chromebook/thonny-admin/#step-2-install-pip","title":"Step 2: Install Pip","text":"<pre><code>sudo apt update\nsudo apt install python3-venv python3-pip -y\n</code></pre>"},{"location":"chromebook/thonny-admin/#step-3-install-a-virtual-env-and-put-thonny-in-it","title":"Step 3: Install a Virtual Env and Put Thonny in it","text":"<pre><code>python3 -m venv ~/thonny-venv\nsource ~/thonny-venv/bin/activate\npip install thonny\n</code></pre>"},{"location":"chromebook/thonny-admin/#step-4-run-thonny-from-the-terminal","title":"Step 4: Run Thonny from the Terminal","text":"<pre><code>~/thonny-venv/bin/thonny\n</code></pre> <p>Note:  You can also create an alias to make this command earlier.</p>"},{"location":"chromebook/thonny-admin/#faster-setup-process","title":"Faster Setup Process","text":""},{"location":"chromebook/thonny-admin/#step-1-enable-linux-development-environment","title":"Step 1: Enable Linux Development Environment","text":"<p>Go to the Setting up ChromeOS in Developer Mode</p> <p>Note: Using <code>apt install thonny</code> can gives older versions, use the official installer:</p> <pre><code># Update system first\nsudo apt update\n\n# Install latest Thonny with Python bundle\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n</code></pre> <p>This method installs the current version (3.3.10+) rather than the outdated Debian package version, avoiding compatibility issues.</p>"},{"location":"chromebook/thonny-admin/#step-3-configure-usb-access","title":"Step 3: Configure USB Access","text":"<ol> <li>Go to Settings \u2192 About ChromeOS \u2192 Developers \u2192 Linux development environment</li> <li>Click Manage USB devices</li> <li>Connect your USB device (Arduino, Raspberry Pi Pico, etc.)</li> <li>Enable the device in the list</li> <li>Add user to dialout group: <code>sudo usermod -a -G dialout $USER</code></li> <li>Restart the Linux container (Settings \u2192 Developers \u2192 Linux \u2192 Advanced \u2192 Restart)</li> </ol>"},{"location":"chromebook/thonny-admin/#step-4-create-desktop-launcher","title":"Step 4: Create Desktop Launcher","text":"<p>Make Thonny easily accessible:</p> <pre><code># Create desktop file for launcher\ncat &gt; ~/.local/share/applications/thonny.desktop &lt;&lt; EOF\n[Desktop Entry]\nName=Thonny\nComment=Python IDE for beginners\nExec=thonny %F\nIcon=thonny\nTerminal=false\nType=Application\nCategories=Development;IDE;\nMimeType=text/x-python;\nEOF\n\n# Make executable\nchmod +x ~/.local/share/applications/thonny.desktop\n</code></pre>"},{"location":"chromebook/thonny-admin/#batch-script-approach","title":"Batch Script Approach","text":"<p>Create a setup script to automate the software installation:</p> <pre><code>#!/bin/bash\n# Save as setup_thonny.sh\n\necho \"Setting up Thonny development environment...\"\n\n# Update system\nsudo apt update\n\n# Install Thonny\nbash &lt;(wget -O - https://thonny.org/installer-for-linux)\n\n# Add user to dialout group\nsudo usermod -a -G dialout $USER\n\n# Create desktop launcher\ncat &gt; ~/.local/share/applications/thonny.desktop &lt;&lt; EOF\n[Desktop Entry]\nName=Thonny\nComment=Python IDE for beginners\nExec=thonny %F\nIcon=thonny\nTerminal=false\nType=Application\nCategories=Development;IDE;\nMimeType=text/x-python;\nEOF\n\nchmod +x ~/.local/share/applications/thonny.desktop\n\necho \"Setup complete! Please restart Linux container and connect USB devices.\"\necho \"Go to Settings &gt; Developers &gt; Linux &gt; Manage USB devices to enable your hardware.\"\n</code></pre> <p>Run with: <code>bash setup_thonny.sh</code></p>"},{"location":"chromebook/thonny-admin/#step-by-step-create-a-thonny-launcher-on-chromeos","title":"Step-by-Step: Create a Thonny Launcher on ChromeOS","text":""},{"location":"chromebook/thonny-admin/#1-create-a-desktop-file","title":"1. Create a <code>.desktop</code> file","text":"<p>Run this command in your Linux terminal:</p> <pre><code>nano ~/.local/share/applications/thonny.desktop\n</code></pre>"},{"location":"chromebook/thonny-admin/#2-paste-the-following-contents-adjusting-username-if-needed","title":"2. Paste the following contents (adjusting username if needed):","text":"<pre><code>[Desktop Entry]\nVersion=1.0\nType=Application\nName=Thonny\nGenericName=Python IDE\nComment=Thonny IDE for MicroPython and Python development\nExec=env TK_USE_PLATFORM_MENUBAR=0 /home/urocdeveloper01/thonny-venv/bin/thonny\nIcon=python3\nTerminal=false\nCategories=Development;Education;IDE;\nStartupNotify=true\n</code></pre> <p>Replace <code>/home/urocdeveloper01/</code> with the correct path if your username is different. You can check your username with <code>whoami</code>.</p>"},{"location":"chromebook/thonny-admin/#3-save-and-exit-the-editor","title":"\ud83d\udcbe 3. Save and exit the editor:","text":"<ul> <li>Press <code>Ctrl+O</code> to save</li> <li>Press <code>Enter</code> to confirm the file name</li> <li>Press <code>Ctrl+X</code> to exit Nano</li> </ul>"},{"location":"chromebook/thonny-admin/#4-optional-add-a-custom-icon","title":"4. (Optional) Add a custom icon","text":"<p>If you want a real Thonny icon:</p> <pre><code>mkdir -p ~/.local/share/icons\nwget https://en.wikipedia.org/wiki/Thonny#/media/File:Thonny_logo.png -O ~/.local/share/icons/thonny.png\n</code></pre> <p>Then change the <code>Icon=</code> line in the <code>.desktop</code> file:</p> <pre><code>Icon=/home/urocdeveloper01/.local/share/icons/thonny.png\n</code></pre>"},{"location":"chromebook/thonny-admin/#5-refresh-the-launcher","title":"5. Refresh the launcher","text":"<p>Now restart your Linux container or run:</p> <pre><code>update-desktop-database ~/.local/share/applications\n</code></pre> <p>Then:</p> <ul> <li>Open your ChromeOS launcher</li> <li>Scroll down to \u201cLinux apps\u201d</li> <li>You should now see Thonny with a Python icon!</li> </ul> <p>You can right-click it and pin it to the shelf for even faster access.</p>"},{"location":"linux/","title":"Rasberry Pi and Linux","text":""},{"location":"windows/","title":"Windows","text":""},{"location":"windows/#installing-thonny-on-a-windows-computer","title":"Installing Thonny on a Windows Computer","text":"<p>To install Thonny on your Windows computer, just follow the directions on the Thonny website:</p> <p>https://thonny.org/</p> <p>The downloads page is on the Thonny GitHub site:</p> <p>https://github.com/thonny/thonny/releases/download</p> <p>By default, Windows does not block the the USB ports.  However, your computer might have additional security measures in places.  Check with your school's computer administrator for details.</p> <p>Installer with 64-bit Python 3.10, requires 64-bit Windows 8.1 / 10 / 11 thonny-4.1.7.exe (21 MB)</p> <p>Installer with 32-bit Python 3.8, suitable for all Windows versions since 7 thonny-py38-4.1.7.exe (20 MB)</p> <p>Portable variant with 64-bit Python 3.10 thonny-4.1.7-windows-portable.zip (31 MB)</p> <p>Portable variant with 32-bit Python 3.8 thonny-py38-4.1.7-windows-portable.zip (29 MB)</p> <p>Re-using an existing Python installation (for advanced users)</p> <pre><code>pip install thonny\n</code></pre>"}]}